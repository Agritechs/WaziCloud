# coding: utf-8

"""
    WAZIUP API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SubscriptionRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, entities=None, attributes=None, reference=None, duration=None, notify_conditions=None):
        """
        SubscriptionRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'entities': 'list[Entity]',
            'attributes': 'list[str]',
            'reference': 'str',
            'duration': 'str',
            'notify_conditions': 'list[NotifyCondition]'
        }

        self.attribute_map = {
            'entities': 'entities',
            'attributes': 'attributes',
            'reference': 'reference',
            'duration': 'duration',
            'notify_conditions': 'notifyConditions'
        }

        self._entities = entities
        self._attributes = attributes
        self._reference = reference
        self._duration = duration
        self._notify_conditions = notify_conditions

    @property
    def entities(self):
        """
        Gets the entities of this SubscriptionRequest.


        :return: The entities of this SubscriptionRequest.
        :rtype: list[Entity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """
        Sets the entities of this SubscriptionRequest.


        :param entities: The entities of this SubscriptionRequest.
        :type: list[Entity]
        """

        self._entities = entities

    @property
    def attributes(self):
        """
        Gets the attributes of this SubscriptionRequest.


        :return: The attributes of this SubscriptionRequest.
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this SubscriptionRequest.


        :param attributes: The attributes of this SubscriptionRequest.
        :type: list[str]
        """

        self._attributes = attributes

    @property
    def reference(self):
        """
        Gets the reference of this SubscriptionRequest.


        :return: The reference of this SubscriptionRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """
        Sets the reference of this SubscriptionRequest.


        :param reference: The reference of this SubscriptionRequest.
        :type: str
        """

        self._reference = reference

    @property
    def duration(self):
        """
        Gets the duration of this SubscriptionRequest.


        :return: The duration of this SubscriptionRequest.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this SubscriptionRequest.


        :param duration: The duration of this SubscriptionRequest.
        :type: str
        """

        self._duration = duration

    @property
    def notify_conditions(self):
        """
        Gets the notify_conditions of this SubscriptionRequest.


        :return: The notify_conditions of this SubscriptionRequest.
        :rtype: list[NotifyCondition]
        """
        return self._notify_conditions

    @notify_conditions.setter
    def notify_conditions(self, notify_conditions):
        """
        Sets the notify_conditions of this SubscriptionRequest.


        :param notify_conditions: The notify_conditions of this SubscriptionRequest.
        :type: list[NotifyCondition]
        """

        self._notify_conditions = notify_conditions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
