# coding: utf-8

"""
    WAZIUP API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Process(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, owner=None, app=None, release=None, created=None, updated=None, uuid=None, type=None, num=None, state=None):
        """
        Process - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'owner': 'str',
            'app': 'str',
            'release': 'str',
            'created': 'str',
            'updated': 'str',
            'uuid': 'str',
            'type': 'str',
            'num': 'int',
            'state': 'str'
        }

        self.attribute_map = {
            'owner': 'Owner',
            'app': 'App',
            'release': 'Release',
            'created': 'Created',
            'updated': 'Updated',
            'uuid': 'UUID',
            'type': 'Type',
            'num': 'Num',
            'state': 'State'
        }

        self._owner = owner
        self._app = app
        self._release = release
        self._created = created
        self._updated = updated
        self._uuid = uuid
        self._type = type
        self._num = num
        self._state = state

    @property
    def owner(self):
        """
        Gets the owner of this Process.


        :return: The owner of this Process.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this Process.


        :param owner: The owner of this Process.
        :type: str
        """

        self._owner = owner

    @property
    def app(self):
        """
        Gets the app of this Process.


        :return: The app of this Process.
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """
        Sets the app of this Process.


        :param app: The app of this Process.
        :type: str
        """

        self._app = app

    @property
    def release(self):
        """
        Gets the release of this Process.


        :return: The release of this Process.
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """
        Sets the release of this Process.


        :param release: The release of this Process.
        :type: str
        """

        self._release = release

    @property
    def created(self):
        """
        Gets the created of this Process.


        :return: The created of this Process.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Process.


        :param created: The created of this Process.
        :type: str
        """

        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this Process.


        :return: The updated of this Process.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Process.


        :param updated: The updated of this Process.
        :type: str
        """

        self._updated = updated

    @property
    def uuid(self):
        """
        Gets the uuid of this Process.


        :return: The uuid of this Process.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this Process.


        :param uuid: The uuid of this Process.
        :type: str
        """

        self._uuid = uuid

    @property
    def type(self):
        """
        Gets the type of this Process.


        :return: The type of this Process.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Process.


        :param type: The type of this Process.
        :type: str
        """

        self._type = type

    @property
    def num(self):
        """
        Gets the num of this Process.


        :return: The num of this Process.
        :rtype: int
        """
        return self._num

    @num.setter
    def num(self, num):
        """
        Sets the num of this Process.


        :param num: The num of this Process.
        :type: int
        """

        self._num = num

    @property
    def state(self):
        """
        Gets the state of this Process.


        :return: The state of this Process.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Process.


        :param state: The state of this Process.
        :type: str
        """

        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
