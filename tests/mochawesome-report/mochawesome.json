{
  "stats": {
    "suites": 70,
    "tests": 72,
    "passes": 57,
    "pending": 0,
    "failures": 15,
    "start": "2018-02-08T15:58:36.793Z",
    "end": "2018-02-08T15:58:43.251Z",
    "duration": 6458,
    "testsRegistered": 72,
    "passPercent": 79.2,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "warning",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "2558f5dc-ff0d-4429-87c9-3df7bccea7c5",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 185,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n  });\n//create sample notification\nchai.request(baseUrl)\n  .post(`/domains/${domain}/notifications`)\n  .send(notification)\n  .end((err, res) => {\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/notifications`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((err, res) => {\n        sampleNotification = res.body[0];\n        done();\n      });\n  });",
        "err": {},
        "isRoot": true,
        "uuid": "d7e02334-2eb5-4d64-9834-0d3cfc4cc3ae",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 178,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n      .delete(`/domains/${domain}/sensors/${sensor.id}`)\n      .end((err, rss) => {\n        done();\n      })\n  });",
        "err": {},
        "isRoot": true,
        "uuid": "5a5a77c1-1556-40ca-8034-fd07b27d387e",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "1e88dd80-e259-4dc4-8739-58a20920e150",
        "title": "Domains with admin Previledges",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.admin.test.js",
        "file": "/test/domains.admin.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Domains with admin Previledges \"before all\" hook",
            "timedOut": false,
            "duration": 91,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n      .delete(`/domains/${domainData.id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((err, res) => {\n        done();\n      });\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "d7d02468-82ec-42b2-bc95-d328be6504f2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Domains with admin Previledges \"after all\" hook",
            "timedOut": false,
            "duration": 7,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .delete(`/domains/${domainData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "c7f998ff-a6c4-40d5-9ef2-642a2ff3a22b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "0dd22fff-8d8d-4f9b-93c2-54688123ad2e",
            "title": "create a domain",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.admin.test.js",
            "file": "/test/domains.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Create a domain",
                "fullTitle": "Domains with admin Previledges create a domain it should Create a domain",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(domainData)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "311803de-9170-4ee6-bfe3-2ef42667d557",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it shouldn't Create a domain for repeated data",
                "fullTitle": "Domains with admin Previledges create a domain it shouldn't Create a domain for repeated data",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(domainData)\n  .end((err, res) => {\n    res.should.have.status(422);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e33d7ecb-56c5-4b74-895e-0a2a745aeeea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "311803de-9170-4ee6-bfe3-2ef42667d557",
              "e33d7ecb-56c5-4b74-895e-0a2a745aeeea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 160,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "8338dea3-702d-46f0-9d91-ae7dfbeabbc7",
            "title": "Get all Domains",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.admin.test.js",
            "file": "/test/domains.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the domains",
                "fullTitle": "Domains with admin Previledges Get all Domains it should GET all the domains",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "bfece283-d9d0-466c-9a2c-8b3010a9314a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bfece283-d9d0-466c-9a2c-8b3010a9314a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "d016313b-1e48-40a2-91ca-6d775732c989",
            "title": "Get a single domain",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.admin.test.js",
            "file": "/test/domains.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should get a single domain",
                "fullTitle": "Domains with admin Previledges Get a single domain it should get a single domain",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domainData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6f504c96-b89c-457a-8618-608e048515da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should return not found for domain that doesnt exist",
                "fullTitle": "Domains with admin Previledges Get a single domain it should return not found for domain that doesnt exist",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/this-id-doesnt-exist${Date.now()}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(404);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403\n    at chai.request.get.set.end (test/domains.admin.test.js:87:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 404\n"
                },
                "isRoot": false,
                "uuid": "78682f51-56bb-4614-9215-bec32145efce",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6f504c96-b89c-457a-8618-608e048515da"
            ],
            "failures": [
              "78682f51-56bb-4614-9215-bec32145efce"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "3b74ee96-821e-42e3-9cfb-208b0660f301",
            "title": "Remove Domain",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.admin.test.js",
            "file": "/test/domains.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should remove a single domain",
                "fullTitle": "Domains with admin Previledges Remove Domain it should remove a single domain",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/${domainData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d3bbef82-2e48-4ddf-a41e-159cc61a2880",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should return not found for domain that doesnt exist",
                "fullTitle": "Domains with admin Previledges Remove Domain it should return not found for domain that doesnt exist",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/this-id-doesnt-exist${Date.now()}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(404);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403\n    at chai.request.delete.set.end (test/domains.admin.test.js:107:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 404\n"
                },
                "isRoot": false,
                "uuid": "869a50b7-f2e0-4fb1-a779-302f324048c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d3bbef82-2e48-4ddf-a41e-159cc61a2880"
            ],
            "failures": [
              "869a50b7-f2e0-4fb1-a779-302f324048c2"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "45bf4730-6423-43c5-8945-30ef643ed72d",
        "title": "Domains",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.unauthorized.test.js",
        "file": "/test/domains.unauthorized.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Domains \"before all\" hook",
            "timedOut": false,
            "duration": 231,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n      .delete(`/domains/${domainData.id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((err, res) => {\n        chai.request(baseUrl)\n          .post(`/domains`)\n          .set('Authorization', `Bearer ${token}`)\n          .send(domainDataAlt)\n          .end((err, res) => {\n            done();\n          });\n      });\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "48afe178-5c16-468a-bf66-685d38c252db",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Domains \"after all\" hook",
            "timedOut": false,
            "duration": 62,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .delete(`/domains/${domainData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    chai.request(baseUrl)\n      .delete(`/domains/${domainDataAlt.id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((err, res) => {\n        done();\n      });\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "96d8c2b2-5efd-4ac7-88fc-acf22b7e40ee",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "730fec24-0f28-41a5-93d1-9cbc9520b606",
            "title": "create a domain",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.unauthorized.test.js",
            "file": "/test/domains.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Create a domain",
                "fullTitle": "Domains create a domain it should Create a domain",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains`)\n  .send(domainData)\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "065b4e54-66ed-4dd0-a137-36c04b2183e3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "065b4e54-66ed-4dd0-a137-36c04b2183e3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 92,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "9ee02b8e-6783-4599-9e6f-f4de753ff5f7",
            "title": "Get all Domains",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.unauthorized.test.js",
            "file": "/test/domains.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the domains",
                "fullTitle": "Domains Get all Domains it should GET all the domains",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1fe49f09-2484-41c5-8985-80f9817631f7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1fe49f09-2484-41c5-8985-80f9817631f7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 101,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "238eea33-4543-4c6b-86c3-90b3950ce7a1",
            "title": "Get a single domain",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.unauthorized.test.js",
            "file": "/test/domains.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should get a single domain",
                "fullTitle": "Domains Get a single domain it should get a single domain",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domainDataAlt.id}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "00fe7749-5886-4fd8-94ba-479691d12d2b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should return not found for domain that doesnt exist",
                "fullTitle": "Domains Get a single domain it should return not found for domain that doesnt exist",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/this-id-doesnt-exist${Date.now()}`)\n  .end((err, res) => {\n    res.should.have.status(404);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403\n    at chai.request.get.end (test/domains.unauthorized.test.js:86:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 404\n"
                },
                "isRoot": false,
                "uuid": "b414618d-14ad-49f0-87de-115cf430c377",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "00fe7749-5886-4fd8-94ba-479691d12d2b"
            ],
            "failures": [
              "b414618d-14ad-49f0-87de-115cf430c377"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "3fb86ded-7c84-4e7a-9bb2-103d893c908a",
            "title": "Remove Domain",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.unauthorized.test.js",
            "file": "/test/domains.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should remove a single domain",
                "fullTitle": "Domains Remove Domain it should remove a single domain",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/${domainDataAlt.id}`)\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e280ed62-0f90-49d7-b6f6-73da041b2324",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e280ed62-0f90-49d7-b6f6-73da041b2324"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 93,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "907139df-747b-4145-a4be-5f67036607db",
        "title": "Entities with admin previledges",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
        "file": "/test/entities.admin.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Entities with admin previledges \"before all\" hook",
            "timedOut": false,
            "duration": 97,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n\t.post('/auth/token')\n\t.send(userCredentials)\n\t.end(function (err, response) {\n\t\ttoken = response.text;\n\t\tchai.request(baseUrl)\n\t\t\t.delete(`/domains/${domain}/entities/${entities.type}/${entities.id}`)\n\t\t\t.set('Authorization', `Bearer ${token}`)\n\t\t\t.end((err, rss) => {\n\t\t\t\tdone();\n\t\t\t})\n\t});",
            "err": {},
            "isRoot": false,
            "uuid": "15901133-6b58-4450-a47e-0b27ca28757a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Entities with admin previledges \"after all\" hook",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n\t.delete(`/domains/${domain}/entities/${entities.type}/${entities.id}`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.end((err, rss) => {\n\t\tdone();\n\t})",
            "err": {},
            "isRoot": false,
            "uuid": "44e29080-f00a-4b8d-8e3b-1a685d799e8b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "552c4d49-c2c4-4eea-8340-4ce06fe6f322",
            "title": "create a new entity",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should create a new entity",
                "fullTitle": "Entities with admin previledges create a new entity it should create a new entity",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.post(`/domains/${domain}/entities`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.send(entities)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "e5becc6d-31a6-46cd-9618-f37f8ed38efe",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e5becc6d-31a6-46cd-9618-f37f8ed38efe"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "a0d7b5f3-538c-4654-b696-01a9a7525ac4",
            "title": "get all known entity types",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all known entity types",
                "fullTitle": "Entities with admin previledges get all known entity types it should GET all known entity types",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.get(`/domains/${domain}/entities/types`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.a('array');\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "1e5ae457-0bd6-4dfe-b36f-1b07782706b7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1e5ae457-0bd6-4dfe-b36f-1b07782706b7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "e0d19bb3-91e2-4f29-a603-c19b2d15ad21",
            "title": "get entities of one type",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET entities of one type",
                "fullTitle": "Entities with admin previledges get entities of one type it should GET entities of one type",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.get(`/domains/${domain}/entities/${entities.type}`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.a('array');\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "fef46410-147f-4e4c-8fad-0486a90fd818",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fef46410-147f-4e4c-8fad-0486a90fd818"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "90c8cf23-d490-4408-8744-45b86e8dbc36",
            "title": "get a single entity",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET a single entity",
                "fullTitle": "Entities with admin previledges get a single entity it should GET a single entity",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.get(`/domains/${domain}/entities/${entities.type}/${entities.id}`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.a('object');\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "e7336a1d-90d9-44f6-86f3-5d0fc7331b32",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e7336a1d-90d9-44f6-86f3-5d0fc7331b32"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "86d8ad49-26f2-40f9-b2d6-8037f077a82d",
            "title": "add an entity attribute value",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should add an entity attribute value",
                "fullTitle": "Entities with admin previledges add an entity attribute value it should add an entity attribute value",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.post(`/domains/${domain}/entities/${entities.type}/${entities.id}/temprature`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.send({\n\t\t\"value\": \"25.6\",\n\t\t\"timestamp\": \"2016-06-08T18:20:27.873Z\"\n\t})\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "3c289fe4-190c-4e52-a7ac-bf31c0ec70e9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3c289fe4-190c-4e52-a7ac-bf31c0ec70e9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "56ddf3fe-3596-4b97-bfae-4822283d335b",
            "title": "get entity attribute values",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should get entity attribute values",
                "fullTitle": "Entities with admin previledges get entity attribute values it should get entity attribute values",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.get(`/domains/${domain}/entities/${entities.type}/${entities.id}/temprature`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "881d6ab1-34e5-49ef-9a06-8c78143ae0ab",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "881d6ab1-34e5-49ef-9a06-8c78143ae0ab"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "fddc272e-1cb6-48ba-8f94-9b6b96eead14",
            "title": "set entity attribute values",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should set entity attribute values",
                "fullTitle": "Entities with admin previledges set entity attribute values it should set entity attribute values",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.put(`/domains/${domain}/entities/${entities.type}/${entities.id}/temprature`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.send({\n\t\t\"value\": \"26.6\",\n\t\t\"timestamp\": \"2016-06-08T18:20:27.873Z\"\n\t})\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "cd82ffc5-598d-4bdc-8fe4-3b44c6ada2b0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cd82ffc5-598d-4bdc-8fe4-3b44c6ada2b0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "7422e02e-1700-48fb-a9d3-8c1d0bd8e0b5",
            "title": "delete an entity attribute",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should delete an entity attribute",
                "fullTitle": "Entities with admin previledges delete an entity attribute it should delete an entity attribute",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.put(`/domains/${domain}/entities/${entities.type}/${entities.id}/temprature`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.send({\n\t\t\"value\": \"26.6\",\n\t\t\"timestamp\": \"2016-06-08T18:20:27.873Z\"\n\t})\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "c096caaf-6f85-49b4-a536-9d7e8a75a8e6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c096caaf-6f85-49b4-a536-9d7e8a75a8e6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "3be85a85-a4f6-4d49-8ef1-59277573330a",
        "title": "Measurements with admin previledges",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
        "file": "/test/measurment.admin.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Measurements with admin previledges \"before all\" hook",
            "timedOut": false,
            "duration": 235,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n      .post(`/domains/${domain}/sensors`)\n      .set('authorization', `Bearer ${token}`)\n      .send(sensor)\n      .end((err, res) => {\n        done();\n      });\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "d8c71eb7-fd84-42c8-a127-3d778f72d11b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Measurements with admin previledges \"after all\" hook",
            "timedOut": false,
            "duration": 69,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .delete(`/domains/${domain}/sensors/${sensor.id}`)\n  .set('authorization', `Bearer ${token}`)\n  .send(sensor)\n  .end((err, res) => {\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "73db4a24-77ac-4aec-b392-2207acc685f6",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "abab0e31-56f3-4a33-a8fa-ef3339685a61",
            "title": "Get Measurements",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the measurements for a given sensor",
                "fullTitle": "Measurements with admin previledges Get Measurements it should GET all the measurements for a given sensor",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "361e48ca-0acf-427e-91a0-66ce4e23c608",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "361e48ca-0acf-427e-91a0-66ce4e23c608"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "3289aa98-2900-4d7f-9f99-08f8dba6f365",
            "title": "POST Measurements",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should add a measurement value for a given sensor",
                "fullTitle": "Measurements with admin previledges POST Measurements it should add a measurement value for a given sensor",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors/${sensor.id}/measurements`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(measurement)\n  .end((err, res) => {\n    res.should.have.status(200);\n    //res.body.should.be.a('array');\n    //console.log(res);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "0a0f983b-eb05-47fe-b3e9-089d216c3775",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0a0f983b-eb05-47fe-b3e9-089d216c3775"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 25,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "e7ab6296-3df6-4642-9ad7-1cc7d867d90e",
            "title": "Get a single Measurement",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the measurements for a given sensor",
                "fullTitle": "Measurements with admin previledges Get a single Measurement it should GET all the measurements for a given sensor",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    //res.body.should.be.a('array');\n    //console.log(res);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "98d34762-eb3b-4456-951d-87a2a7e268b9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "98d34762-eb3b-4456-951d-87a2a7e268b9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 29,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "efc3bfcc-135f-4589-8b55-060332561d5e",
            "title": "Update Name of a Measurement",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the name of the measurement field",
                "fullTitle": "Measurements with admin previledges Update Name of a Measurement it should update the name of the measurement field",
                "timedOut": false,
                "duration": 141,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/name`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('content-type', 'text/plain')\n  .send(\"ss1\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}`)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('name').eql('ss1');\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c1639254-9d2a-4c6e-b507-66bb938a356e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c1639254-9d2a-4c6e-b507-66bb938a356e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 141,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "292504f5-c1e4-4f30-9e46-4da10c44af26",
            "title": "Update Dimention of a Measurement",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the dimention of the measurement field",
                "fullTitle": "Measurements with admin previledges Update Dimention of a Measurement it should update the dimention of the measurement field",
                "timedOut": false,
                "duration": 148,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/dimension`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('content-type', 'text/plain')\n  .send(\"degree\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}`)\n      .end((err, res) => {\n        //res.body.should.be.a('object');\n        //res.body.should.have.property('dimension').eql('degree');\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "00cfe8cb-687a-42ac-b59a-c8f3eb51bcdf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "00cfe8cb-687a-42ac-b59a-c8f3eb51bcdf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 148,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "60192178-9313-4bae-8114-44a7dad74576",
            "title": "Update dimention",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the dimention of the measurement field",
                "fullTitle": "Measurements with admin previledges Update dimention it should update the dimention of the measurement field",
                "timedOut": false,
                "duration": 128,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/dimension`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('content-type', 'text/plain')\n  .send(\"degree\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}`)\n      .end((err, res) => {\n        //res.body.should.be.a('object');\n        //res.body.should.have.property('dimension').eql('degree');\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "cc6a2d4d-09dc-4e5b-a847-7834e5d10e19",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cc6a2d4d-09dc-4e5b-a847-7834e5d10e19"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 128,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "7b8a3e94-02b6-4630-954e-5593551e759a",
            "title": "Update unit",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the dimention of the measurement field",
                "fullTitle": "Measurements with admin previledges Update unit it should update the dimention of the measurement field",
                "timedOut": false,
                "duration": 126,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/unit`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('content-type', 'text/plain')\n  .send(\"degree\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}`)\n      .end((err, res) => {\n        //res.body.should.be.a('object');\n        //res.body.should.have.property('dimension').eql('degree');\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "97056c7a-4d5b-42e6-a060-a7d77178d98d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "97056c7a-4d5b-42e6-a060-a7d77178d98d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 126,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "807fd0e5-f20e-4fdf-8e62-1157e2ea9c56",
            "title": "get measurement values",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET get measurement values",
                "fullTitle": "Measurements with admin previledges get measurement values it should GET get measurement values",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/values`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    //res.body.should.be.a('array');\n    //console.log(res);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e8ba2413-dfc9-4409-bb8f-c6ba12e3df59",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e8ba2413-dfc9-4409-bb8f-c6ba12e3df59"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "5bd18094-13fa-4ad6-bb81-316e5657d62a",
            "title": "get paginated measurement values",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET get measurement values",
                "fullTitle": "Measurements with admin previledges get paginated measurement values it should GET get measurement values",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/values?vLimit=10&vOffset=0&vDateFrom=2016-01-01T00:00:00.000Z&vDateTo=2016-01-31T23:59:59.999Z`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    res.body.should.have.lengthOf.below(11);\n    //console.log(res);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a9886a81-4b51-4eef-8f17-5f406f594509",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a9886a81-4b51-4eef-8f17-5f406f594509"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "51dc553f-ce11-4928-be72-50aa3b45e127",
        "title": "Measurements",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
        "file": "/test/measurment.unauthorized.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Measurements \"before all\" hook",
            "timedOut": false,
            "duration": 233,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n      .post(`/domains/${domain}/sensors`)\n      .set('authorization', `Bearer ${token}`)\n      .send(sensor)\n      .end((err, res) => {\n        done();\n      });\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "bfcca791-0d1c-4682-8203-361fd147fe9e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Measurements \"after all\" hook",
            "timedOut": false,
            "duration": 74,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .delete(`/domains/${domain}/sensors/${sensor.id}`)\n  .set('authorization', `Bearer ${token}`)\n  .send(sensor)\n  .end((err, res) => {\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "461f0528-6189-4d9c-a453-1fe6841e0993",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "b25f407d-1fd9-4afe-9af4-77bd44723e80",
            "title": "Get Measurements",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the measurements for a given sensor",
                "fullTitle": "Measurements Get Measurements it should GET all the measurements for a given sensor",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a9126d1c-fa75-4fb2-8d9b-96d4998fe298",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a9126d1c-fa75-4fb2-8d9b-96d4998fe298"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 112,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "6f85edac-7605-4b15-bef3-d103fa512f89",
            "title": "POST Measurements",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should add a measurement value for a given sensor",
                "fullTitle": "Measurements POST Measurements it should add a measurement value for a given sensor",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors/${sensor.id}/measurements`)\n  .send(measurement)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a5f8d36e-1d59-4e85-ac2e-038bf5047b5a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a5f8d36e-1d59-4e85-ac2e-038bf5047b5a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 101,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "28d8db68-d0ad-484c-b12d-23a9e37c1cc1",
            "title": "Get a single Measurement",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET a single the measurements for a given sensor",
                "fullTitle": "Measurements Get a single Measurement it should GET a single the measurements for a given sensor",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e30ec83f-4ea2-4cf4-8bba-4248ea9dced8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e30ec83f-4ea2-4cf4-8bba-4248ea9dced8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 105,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "7b909c0c-7b8d-4d17-9499-3ee57aded20c",
            "title": "Update Name of a Measurement",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the name of the measurement field",
                "fullTitle": "Measurements Update Name of a Measurement it should update the name of the measurement field",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/name`)\n  .set('content-type', 'text/plain')\n  .send(\"ss1\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d2160d82-99dc-4556-9656-126aa74f0856",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d2160d82-99dc-4556-9656-126aa74f0856"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 93,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "347939d7-4490-4c02-8702-4fc8a616b7db",
            "title": "Update Dimention of a Measurement",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the dimention of the measurement field",
                "fullTitle": "Measurements Update Dimention of a Measurement it should update the dimention of the measurement field",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/dimension`)\n  .set('content-type', 'text/plain')\n  .send(\"degree\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4b42d7a1-14c0-43bc-a78c-53fb23eaaa92",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4b42d7a1-14c0-43bc-a78c-53fb23eaaa92"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 91,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "d5cd4b7b-fe36-46bd-9629-bd037ba91ee0",
            "title": "Update dimention",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the dimention of the measurement field",
                "fullTitle": "Measurements Update dimention it should update the dimention of the measurement field",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/dimension`)\n  .set('content-type', 'text/plain')\n  .send(\"degree\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "24619592-629b-4ec9-ad5a-bc36297b8fd1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "24619592-629b-4ec9-ad5a-bc36297b8fd1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 96,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "00b31f26-9e2b-4e2f-88fa-01adf439f7ef",
            "title": "Update unit",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the dimention of the measurement field",
                "fullTitle": "Measurements Update unit it should update the dimention of the measurement field",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/unit`)\n  .set('content-type', 'text/plain')\n  .send(\"degree\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7eba2289-982f-445a-aef9-40b8e45b2df1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7eba2289-982f-445a-aef9-40b8e45b2df1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 97,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "68a679f0-7cb2-406e-b953-7719266ea9ed",
            "title": "get paginated measurement values",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET get measurement values",
                "fullTitle": "Measurements get paginated measurement values it should GET get measurement values",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/values?vLimit=10&vOffset=0&vDateFrom=2016-01-01T00:00:00.000Z&vDateTo=2016-01-31T23:59:59.999Z`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    res.body.should.have.lengthOf.below(11);\n    //console.log(res);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "db657a45-ca9d-485f-bbe2-f450664573c1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "db657a45-ca9d-485f-bbe2-f450664573c1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 100,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "35c295cb-d18e-4713-8261-0659c409ed94",
        "title": "Notifications",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/notifications.test.js",
        "file": "/test/notifications.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2055bd90-378b-4779-bcf0-9f9ea59083a4",
            "title": "post a message to social networks",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/notifications.test.js",
            "file": "/test/notifications.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should post a message to social networks",
                "fullTitle": "Notifications post a message to social networks it should post a message to social networks",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/notifications`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(notification)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f5149fc5-6a3e-482e-9c62-835e26304991",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f5149fc5-6a3e-482e-9c62-835e26304991"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "faa3f546-0da7-4161-ad2a-d2b59eb4efc0",
            "title": "Get all notifications",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/notifications.test.js",
            "file": "/test/notifications.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the messages posted on social networks",
                "fullTitle": "Notifications Get all notifications it should GET all the messages posted on social networks",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/notifications`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "be4d29c6-c54d-479c-bdfc-7d524e6ed72e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "be4d29c6-c54d-479c-bdfc-7d524e6ed72e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "c8fd5369-13df-4094-baeb-b755ff460c32",
            "title": "Get a one message",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/notifications.test.js",
            "file": "/test/notifications.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should get a single notificaion",
                "fullTitle": "Notifications Get a one message it should get a single notificaion",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/notifications/${sampleNotification.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 500",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 500\n    at chai.request.get.set.end (test/notifications.test.js:68:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 500\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "8df37915-8c70-4a25-86c6-fd4de789ef43",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should return not found for notification that doesnt exist",
                "fullTitle": "Notifications Get a one message it should return not found for notification that doesnt exist",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/notifications/this-id-doesnt-exist${Date.now()}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(400);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 400 but got 500",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 400 but got 500\n    at chai.request.get.set.end (test/notifications.test.js:77:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 500\n+ 400\n"
                },
                "isRoot": false,
                "uuid": "ae052420-d835-43db-8934-f44314591ea3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "8df37915-8c70-4a25-86c6-fd4de789ef43",
              "ae052420-d835-43db-8934-f44314591ea3"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "fc1532f6-dc42-43f3-8b38-c226cb91e872",
            "title": "delete a message to social networks",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/notifications.test.js",
            "file": "/test/notifications.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should delete a message to social networks",
                "fullTitle": "Notifications delete a message to social networks it should delete a message to social networks",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/${domain}/notifications/${sampleNotification.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "32613e4d-ae2e-40d4-8964-cce58db9e47b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should return not found for message that doesnt exist",
                "fullTitle": "Notifications delete a message to social networks it should return not found for message that doesnt exist",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/${domain}/notifications/this-id-doesnt-exist${Date.now()}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(404);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b3a9ab9d-3abb-4e9e-9a29-522d0ed36b47",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "32613e4d-ae2e-40d4-8964-cce58db9e47b",
              "b3a9ab9d-3abb-4e9e-9a29-522d0ed36b47"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 35,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "c030305e-3317-46d1-8388-7792a3d74a6e",
        "title": "Sensors with admin previledges",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
        "file": "/test/sensor.admin.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Sensors with admin previledges \"before all\" hook",
            "timedOut": false,
            "duration": 98,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n      .delete(`/domains/${domain}/sensors/${sensor.id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((err, rss) => {\n        done();\n      })\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "0eeb98cc-e0cc-4f83-bb2b-7638bbaf80b8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "db0ceda8-930a-44cf-8fc3-ba360aa0bd2a",
            "title": "Get Sensors",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the the senseors",
                "fullTitle": "Sensors with admin previledges Get Sensors it should GET all the the senseors",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    //res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "bc82826d-5b45-427b-9c60-1724916f5164",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bc82826d-5b45-427b-9c60-1724916f5164"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "9cddd744-74a2-43c0-b12a-0b24de7c1d66",
            "title": "Create sensors",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should POST a sensor ",
                "fullTitle": "Sensors with admin previledges Create sensors it should POST a sensor ",
                "timedOut": false,
                "duration": 157,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors`)\n  .set('authorization', `Bearer ${token}`)\n  .send(sensor)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "bf5ea067-ac68-47b1-8819-c9b58872b60f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should Reject posting data with repeated values",
                "fullTitle": "Sensors with admin previledges Create sensors it should Reject posting data with repeated values",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(sensor)\n  .end((err, res) => {\n    res.should.have.status(422);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4d67f9a5-3b5e-403a-96ee-c0e0300a8eca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should Reject posting a sensor with invalid data",
                "fullTitle": "Sensors with admin previledges Create sensors it should Reject posting a sensor with invalid data",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(invalidSensor)\n  .end((err, res) => {\n    res.should.have.status(400);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c636d065-0063-4f4f-9fce-475378be78c1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bf5ea067-ac68-47b1-8819-c9b58872b60f",
              "4d67f9a5-3b5e-403a-96ee-c0e0300a8eca",
              "c636d065-0063-4f4f-9fce-475378be78c1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 192,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "30a675ba-98bf-4564-83e8-e6ed0dfd983b",
            "title": "Get a Single Sensor",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET a sensor by the given id",
                "fullTitle": "Sensors with admin previledges Get a Single Sensor it should GET a sensor by the given id",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n        .get(`/domains/${domain}/sensors/${sensor.id}`)\n        .set('Authorization', `Bearer ${token}`)\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.be.a('object');\n          res.body.should.have.property('gateway_id');\n          res.body.should.have.property('name');\n          res.body.should.have.property('owner');\n          res.body.should.have.property('measurements');\n          res.body.should.have.property('location');\n          res.body.should.have.property('id').eql(sensor.id);\n          done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "bcc1153a-b613-4386-9414-c67cba21bdd7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should give a 404 err a sensor with none existent id",
                "fullTitle": "Sensors with admin previledges Get a Single Sensor it should give a 404 err a sensor with none existent id",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n        .get(`/domains/${domain}/sensors/this-id-does-not-exist`)\n        .set('Authorization', `Bearer ${token}`)\n        .end((err, res) => {\n          res.should.have.status(404);\n          done();\n        });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403\n    at chai.request.get.set.end (test/sensor.admin.test.js:99:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 404\n"
                },
                "isRoot": false,
                "uuid": "d8cc9055-d01e-4dac-802b-4cbd1260bf24",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bcc1153a-b613-4386-9414-c67cba21bdd7"
            ],
            "failures": [
              "d8cc9055-d01e-4dac-802b-4cbd1260bf24"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "8a72c2c1-6b2b-4699-b976-83daa7df5198",
            "title": "Insert Owner",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the owner field",
                "fullTitle": "Sensors with admin previledges Insert Owner it should update the owner field",
                "timedOut": false,
                "duration": 134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/owner`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('content-type', 'text/plain')\n  .send(\"henok\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}`)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('owner').eql('henok');\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b29fc772-dc58-4d37-a3c7-7bf6969ebb43",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b29fc772-dc58-4d37-a3c7-7bf6969ebb43"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 134,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "6d894cd7-bdac-46bf-b933-cefb199a948c",
            "title": "Insert Name",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the name field",
                "fullTitle": "Sensors with admin previledges Insert Name it should update the name field",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/name`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('content-type', 'text/plain')\n  .send(\"SEN1\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}`)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('name').eql('SEN1');\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4581b185-66de-4b9d-95d4-dfb5bb4943ca",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4581b185-66de-4b9d-95d4-dfb5bb4943ca"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 116,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "0054fcbc-d6e4-43cd-9644-490f24c9f7d2",
            "title": "Insert Location",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the location field",
                "fullTitle": "Sensors with admin previledges Insert Location it should update the location field",
                "timedOut": false,
                "duration": 132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/location`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    \"latitude\": 5.36,\n    \"longitude\": 4.0083\n  })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}`)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.location.should.have.property('latitude').eql(5.36);\n        res.body.location.should.have.property('longitude').eql(4.0083);\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f26a1646-9dff-4a27-a9d5-8fa5f3ae82fa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f26a1646-9dff-4a27-a9d5-8fa5f3ae82fa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 132,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "1cd4ac42-3ab9-4a75-aa32-7d65fce0ef49",
            "title": "Remove Sensor",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Remove a sensor by the given id",
                "fullTitle": "Sensors with admin previledges Remove Sensor it should Remove a sensor by the given id",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/${domain}/sensors/${sensor.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "cd6591b3-7b7b-4207-9a9b-3376b80ac376",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cd6591b3-7b7b-4207-9a9b-3376b80ac376"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 64,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "71046dce-cd9e-4dd1-80cf-b84d12b19fc8",
        "title": "Sensors",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
        "file": "/test/sensor.unauthorized.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4c3633b4-745b-4123-8578-a4a60de4b9ad",
            "title": "Get Sensors",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the the senseors",
                "fullTitle": "Sensors Get Sensors it should GET all the the senseors",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    //res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "20361629-e302-4f32-903b-76ac8f444f2d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "20361629-e302-4f32-903b-76ac8f444f2d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 107,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "63dafbda-248d-4d25-897b-fe7981837376",
            "title": "Create sensors",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should POST a sensor ",
                "fullTitle": "Sensors Create sensors it should POST a sensor ",
                "timedOut": false,
                "duration": 226,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors`)\n  .send(sensor)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "59b0b754-646e-4be7-92f0-e13ac1d80a73",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should Reject posting data with reapeted values",
                "fullTitle": "Sensors Create sensors it should Reject posting data with reapeted values",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors`)\n  .send(sensor)\n  .end((err, res) => {\n    res.should.have.status(422);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "0282242a-8e80-4edf-b17e-d49c8ea88b56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should Reject posting a sensor with invalid data",
                "fullTitle": "Sensors Create sensors it should Reject posting a sensor with invalid data",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors`)\n  .send(invalidSensor)\n  .end((err, res) => {\n    res.should.have.status(400);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a4f9bc7b-3beb-45d6-bb83-cb2e65d699ec",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "59b0b754-646e-4be7-92f0-e13ac1d80a73",
              "0282242a-8e80-4edf-b17e-d49c8ea88b56",
              "a4f9bc7b-3beb-45d6-bb83-cb2e65d699ec"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 440,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "24276c74-6438-46f4-b92c-3b238c9d1248",
            "title": "single sensor",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET a sensor by the given id",
                "fullTitle": "Sensors single sensor it should GET a sensor by the given id",
                "timedOut": false,
                "duration": 140,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n        .get(`/domains/${domain}/sensors/${sensor.id}`)\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.be.a('object');\n          res.body.should.have.property('gateway_id');\n          res.body.should.have.property('name');\n          res.body.should.have.property('owner');\n          res.body.should.have.property('measurements');\n          res.body.should.have.property('location');\n          res.body.should.have.property('id').eql(sensor.id);\n          done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "bd2a2a7e-e7ba-4287-a967-ff7a9cc7126c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should give a 404 err a sensor with none existent id",
                "fullTitle": "Sensors single sensor it should give a 404 err a sensor with none existent id",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n        .get(`/domains/${domain}/sensors/this-id-does-not-exist`)\n        .end((err, res) => {\n          res.should.have.status(404);\n          done();\n        });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403\n    at chai.request.get.end (test/sensor.unauthorized.test.js:92:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 404\n"
                },
                "isRoot": false,
                "uuid": "97f9182a-9812-4ab3-9ed2-b4244b8d61e4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bd2a2a7e-e7ba-4287-a967-ff7a9cc7126c"
            ],
            "failures": [
              "97f9182a-9812-4ab3-9ed2-b4244b8d61e4"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "170f473f-bb7f-4e69-9486-27ae918d4138",
            "title": "insert owner",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the owner field",
                "fullTitle": "Sensors insert owner it should update the owner field",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/owner`)\n  .set('content-type', 'text/plain')\n  .send(\"henok\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "51d8a694-d999-409e-a2d9-9ba80d97f00e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "51d8a694-d999-409e-a2d9-9ba80d97f00e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 92,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "500ae3ec-6745-4797-89a8-1fd67388e564",
            "title": "insert name",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the name field",
                "fullTitle": "Sensors insert name it should update the name field",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/name`)\n  .set('content-type', 'text/plain')\n  .send(\"SEN1\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b3d6da2b-9038-4686-8b27-1027945ca807",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b3d6da2b-9038-4686-8b27-1027945ca807"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 94,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "4e6cbabd-287b-4935-b31d-d7dda034a691",
            "title": "insert location",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the location field",
                "fullTitle": "Sensors insert location it should update the location field",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/location`)\n  .send({\n    \"latitude\": 5.36,\n    \"longitude\": 4.0083\n  })\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ea04ec56-7250-49ac-afb4-b756a7091261",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ea04ec56-7250-49ac-afb4-b756a7091261"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 96,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "8d93a828-6e61-456e-976c-6a2400569a2c",
            "title": "insert sensor kind",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the sensor kind field",
                "fullTitle": "Sensors insert sensor kind it should update the sensor kind field",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/sensor_kind`)\n  .set('content-type', 'text/plain')\n  .send(\"Soil moisture sensor\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "367d0ead-1404-4308-a820-115bbd03c19f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "367d0ead-1404-4308-a820-115bbd03c19f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 99,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "2107f056-1614-4d31-ae89-a37aa0a94d9b",
            "title": "Remove sensor",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Remove a sensor by the given id",
                "fullTitle": "Sensors Remove sensor it should Remove a sensor by the given id",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/${domain}/sensors/${sensor.id}`)\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7d2adc09-231c-4004-ad79-0d9d1456d8f5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7d2adc09-231c-4004-ad79-0d9d1456d8f5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 94,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "ae5522bb-4ea5-4f53-bf2b-d36e37337afc",
        "title": "Socials ",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/socials.test.js",
        "file": "/test/socials.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4a11c657-c301-45aa-8c2d-a406beb2d1c4",
            "title": "Get all messages sent",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/socials.test.js",
            "file": "/test/socials.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the messages sent",
                "fullTitle": "Socials  Get all messages sent it should GET all the messages sent",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.get(`/domains/${domain}/socials`)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.a('array');\n\t\tdone();\n\t});",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 503",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 503\n    at chai.request.get.end (test/socials.test.js:18:22)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:795:18)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 503\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "b946b337-3bda-4ac4-ab51-3787f4c74916",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "b946b337-3bda-4ac4-ab51-3787f4c74916"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "c2f14964-c9bb-4389-b3e9-db1895cd2f15",
            "title": "post a message to social networks",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/socials.test.js",
            "file": "/test/socials.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should post a message to social networds",
                "fullTitle": "Socials  post a message to social networks it should post a message to social networds",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.post(`/domains/${domain}/socials`)\n\t.send(socialData)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 500",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 500\n    at chai.request.post.send.end (test/socials.test.js:30:22)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:795:18)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 500\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "fa40ef2b-f2e1-42b2-b40a-a139e51ceb09",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "fa40ef2b-f2e1-42b2-b40a-a139e51ceb09"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "2cc945cb-ee91-4b4e-9304-fc75abd2b0c0",
        "title": "Users with admin Previledges",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
        "file": "/test/users.admin.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Users with admin Previledges \"before all\" hook",
            "timedOut": false,
            "duration": 95,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n    .get(`/domains/${domain}/users/${userData.id}`)\n    .set('Authorization', `Bearer ${token}`)\n    .end((err, res) => {\n      done();\n    });\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "4348b2d6-6311-440d-9047-66fc23075196",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1decace3-e6a1-42c2-9756-17b508224954",
            "title": "Get all users in a realm",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
            "file": "/test/users.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Get all users in a realm",
                "fullTitle": "Users with admin Previledges Get all users in a realm it should Get all users in a realm",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/users`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403\n    at chai.request.get.set.end (test/users.admin.test.js:37:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "91498c47-4f9a-4396-863e-9b0d91b32c0f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "91498c47-4f9a-4396-863e-9b0d91b32c0f"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "ca76c773-249e-4224-854d-772e055785b6",
            "title": "Create a new user in a realm",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
            "file": "/test/users.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Create a new user in a realm",
                "fullTitle": "Users with admin Previledges Create a new user in a realm it should Create a new user in a realm",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/users`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(userData)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403\n    at chai.request.post.set.send.end (test/users.admin.test.js:49:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "acca2c3a-8fd4-4f9a-85bf-6caa341620a2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "acca2c3a-8fd4-4f9a-85bf-6caa341620a2"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "1c1b7a07-4205-4f34-83ef-89fa91fa50a1",
            "title": "Search users with specific criteria",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
            "file": "/test/users.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Search users with specific criteria",
                "fullTitle": "Users with admin Previledges Search users with specific criteria it should Search users with specific criteria",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/users/search/`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403\n    at chai.request.get.set.end (test/users.admin.test.js:60:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "4372af18-3ff5-42bb-bbc7-f5e68a58a414",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "4372af18-3ff5-42bb-bbc7-f5e68a58a414"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "33823da4-6e3a-476e-8ace-e7c1d549c819",
            "title": "Get a Specific user",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
            "file": "/test/users.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Get a Specific user",
                "fullTitle": "Users with admin Previledges Get a Specific user it should Get a Specific user",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/users/${userData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403\n    at chai.request.get.set.end (test/users.admin.test.js:71:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "b282ef9f-a4e6-4222-b51a-418d7541545d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "b282ef9f-a4e6-4222-b51a-418d7541545d"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "90233290-1284-47f3-bf1e-35548af6a33c",
            "title": "update user data",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
            "file": "/test/users.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update user data",
                "fullTitle": "Users with admin Previledges update user data it should update user data",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/users/${userData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"id\": \"string\"\n  })\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403\n    at chai.request.put.set.send.end (test/users.admin.test.js:87:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "21db6497-9acf-44b0-816b-28ca084d4d61",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "21db6497-9acf-44b0-816b-28ca084d4d61"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "01eaca0c-8836-463e-9b74-50f8c93fc83d",
            "title": "Remove a user",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
            "file": "/test/users.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Remove a user",
                "fullTitle": "Users with admin Previledges Remove a user it should Remove a user",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/users/${userData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403\n    at chai.request.get.set.end (test/users.admin.test.js:98:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "d6062c39-0743-4dab-9793-4b3e2bb5f714",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "d6062c39-0743-4dab-9793-4b3e2bb5f714"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 20000
  },
  "copyrightYear": 2018
}