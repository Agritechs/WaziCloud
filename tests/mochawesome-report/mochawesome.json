{
  "stats": {
    "suites": 69,
    "tests": 71,
    "passes": 56,
    "pending": 0,
    "failures": 15,
    "start": "2018-02-08T15:55:01.942Z",
    "end": "2018-02-08T15:55:08.382Z",
    "duration": 6440,
    "testsRegistered": 71,
    "passPercent": 78.9,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "warning",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "9840629d-f833-45cb-9853-60323a407038",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 154,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n  });\n//create sample notification\nchai.request(baseUrl)\n  .post(`/domains/${domain}/notifications`)\n  .send(notification)\n  .end((err, res) => {\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/notifications`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((err, res) => {\n        sampleNotification = res.body[0];\n        done();\n      });\n  });",
        "err": {},
        "isRoot": true,
        "uuid": "9f6c48fd-4e14-4949-8335-d24464914b43",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 179,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n      .delete(`/domains/${domain}/sensors/${sensor.id}`)\n      .end((err, rss) => {\n        done();\n      })\n  });",
        "err": {},
        "isRoot": true,
        "uuid": "993df68d-e63d-45db-85be-feb8468f0487",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "96aef67a-746a-40df-a421-cc29945f696b",
        "title": "Domains with admin Previledges",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.admin.test.js",
        "file": "/test/domains.admin.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Domains with admin Previledges \"before all\" hook",
            "timedOut": false,
            "duration": 97,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n      .delete(`/domains/${domainData.id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((err, res) => {\n        done();\n      });\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "c36afdad-4f55-4042-97ac-75b69949fb11",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Domains with admin Previledges \"after all\" hook",
            "timedOut": false,
            "duration": 6,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .delete(`/domains/${domainData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "96182ee7-6309-495e-a337-76666d3b3c65",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "f547cf42-d097-42f6-8472-2946b9b68eb1",
            "title": "create a domain",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.admin.test.js",
            "file": "/test/domains.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Create a domain",
                "fullTitle": "Domains with admin Previledges create a domain it should Create a domain",
                "timedOut": false,
                "duration": 148,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(domainData)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "06c6b508-3dd9-4e16-8433-a017c9416053",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it shouldn't Create a domain for repeated data",
                "fullTitle": "Domains with admin Previledges create a domain it shouldn't Create a domain for repeated data",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(domainData)\n  .end((err, res) => {\n    res.should.have.status(422);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4333630a-4efe-4e94-b99b-ef4e7bc7279b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "06c6b508-3dd9-4e16-8433-a017c9416053",
              "4333630a-4efe-4e94-b99b-ef4e7bc7279b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 168,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "fe0a7712-1346-47f4-be52-d60617d4266b",
            "title": "Get all Domains",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.admin.test.js",
            "file": "/test/domains.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the domains",
                "fullTitle": "Domains with admin Previledges Get all Domains it should GET all the domains",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4947494d-d6e2-473e-ad1b-519b72f0c2f8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4947494d-d6e2-473e-ad1b-519b72f0c2f8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "b2d3eeb6-3721-4eac-9757-7b0849a67d0d",
            "title": "Get a single domain",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.admin.test.js",
            "file": "/test/domains.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should get a single domain",
                "fullTitle": "Domains with admin Previledges Get a single domain it should get a single domain",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domainData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "92edb357-83b8-4a8e-b6ab-638f3a8ec737",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should return not found for domain that doesnt exist",
                "fullTitle": "Domains with admin Previledges Get a single domain it should return not found for domain that doesnt exist",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/this-id-doesnt-exist${Date.now()}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(404);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403\n    at chai.request.get.set.end (test/domains.admin.test.js:87:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 404\n"
                },
                "isRoot": false,
                "uuid": "05b9df37-dc43-4b2a-95eb-96c6bc814b6a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "92edb357-83b8-4a8e-b6ab-638f3a8ec737"
            ],
            "failures": [
              "05b9df37-dc43-4b2a-95eb-96c6bc814b6a"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "04662a75-983c-41ae-a777-71040a45b066",
            "title": "Remove Domain",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.admin.test.js",
            "file": "/test/domains.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should remove a single domain",
                "fullTitle": "Domains with admin Previledges Remove Domain it should remove a single domain",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/${domainData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "af5f7181-94cf-4a48-9332-eb1a1ad93111",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should return not found for domain that doesnt exist",
                "fullTitle": "Domains with admin Previledges Remove Domain it should return not found for domain that doesnt exist",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/this-id-doesnt-exist${Date.now()}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(404);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403\n    at chai.request.delete.set.end (test/domains.admin.test.js:107:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 404\n"
                },
                "isRoot": false,
                "uuid": "c92aaae8-ae25-4eb8-aa61-ab9e9591ae1a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "af5f7181-94cf-4a48-9332-eb1a1ad93111"
            ],
            "failures": [
              "c92aaae8-ae25-4eb8-aa61-ab9e9591ae1a"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "d7e658f4-3c91-4f30-8a29-de04f8c228f7",
        "title": "Domains",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.unauthorized.test.js",
        "file": "/test/domains.unauthorized.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Domains \"before all\" hook",
            "timedOut": false,
            "duration": 242,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n      .delete(`/domains/${domainData.id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((err, res) => {\n        chai.request(baseUrl)\n          .post(`/domains`)\n          .set('Authorization', `Bearer ${token}`)\n          .send(domainDataAlt)\n          .end((err, res) => {\n            done();\n          });\n      });\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "1d387168-efbb-415b-866b-3e4248edc3ba",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Domains \"after all\" hook",
            "timedOut": false,
            "duration": 67,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .delete(`/domains/${domainData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    chai.request(baseUrl)\n      .delete(`/domains/${domainDataAlt.id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((err, res) => {\n        done();\n      });\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "784bf397-6428-4c9b-a40f-2ad53aad91d9",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "b802e6c1-25ad-4ee1-9f59-455475e34d24",
            "title": "create a domain",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.unauthorized.test.js",
            "file": "/test/domains.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Create a domain",
                "fullTitle": "Domains create a domain it should Create a domain",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains`)\n  .send(domainData)\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1de8bc3b-8e7c-40a3-935f-960a9b5f9293",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1de8bc3b-8e7c-40a3-935f-960a9b5f9293"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 96,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "93aa7076-e647-4b86-ac7b-03a51fe960ef",
            "title": "Get all Domains",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.unauthorized.test.js",
            "file": "/test/domains.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the domains",
                "fullTitle": "Domains Get all Domains it should GET all the domains",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b670ee50-2f20-4fb9-bf09-909a997c67a5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b670ee50-2f20-4fb9-bf09-909a997c67a5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 108,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "9e1c2379-7c15-4b68-aaa3-454695b17498",
            "title": "Get a single domain",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.unauthorized.test.js",
            "file": "/test/domains.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should get a single domain",
                "fullTitle": "Domains Get a single domain it should get a single domain",
                "timedOut": false,
                "duration": 111,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domainDataAlt.id}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "718f6f1e-a5ba-431d-8cd3-ddd83dd678bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should return not found for domain that doesnt exist",
                "fullTitle": "Domains Get a single domain it should return not found for domain that doesnt exist",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/this-id-doesnt-exist${Date.now()}`)\n  .end((err, res) => {\n    res.should.have.status(404);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403\n    at chai.request.get.end (test/domains.unauthorized.test.js:86:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 404\n"
                },
                "isRoot": false,
                "uuid": "00a4b1cf-de87-4dd2-9087-1fc5264e5462",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "718f6f1e-a5ba-431d-8cd3-ddd83dd678bb"
            ],
            "failures": [
              "00a4b1cf-de87-4dd2-9087-1fc5264e5462"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "bcd1ea03-cde7-4a4c-b82b-389172c44be9",
            "title": "Remove Domain",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/domains.unauthorized.test.js",
            "file": "/test/domains.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should remove a single domain",
                "fullTitle": "Domains Remove Domain it should remove a single domain",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/${domainDataAlt.id}`)\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "474ace84-042d-4ff3-b346-ff8dda4e5729",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "474ace84-042d-4ff3-b346-ff8dda4e5729"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 95,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "823ce368-f2e6-4a37-870b-fda9aafef8a0",
        "title": "Entities with admin previledges",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
        "file": "/test/entities.admin.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Entities with admin previledges \"before all\" hook",
            "timedOut": false,
            "duration": 93,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n\t.post('/auth/token')\n\t.send(userCredentials)\n\t.end(function (err, response) {\n\t\ttoken = response.text;\n\t\tchai.request(baseUrl)\n\t\t\t.delete(`/domains/${domain}/entities/${entities.type}/${entities.id}`)\n\t\t\t.set('Authorization', `Bearer ${token}`)\n\t\t\t.end((err, rss) => {\n\t\t\t\tdone();\n\t\t\t})\n\t});",
            "err": {},
            "isRoot": false,
            "uuid": "89a16905-1681-4617-951a-56677e7531d2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Entities with admin previledges \"after all\" hook",
            "timedOut": false,
            "duration": 7,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n\t.delete(`/domains/${domain}/entities/${entities.type}/${entities.id}`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.end((err, rss) => {\n\t\tdone();\n\t})",
            "err": {},
            "isRoot": false,
            "uuid": "c1c79722-a4cd-40aa-8637-9aa5d24ef7dd",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "fa7c6a6a-b3f9-482e-93af-bb1f7d61409a",
            "title": "create a new entity",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should create a new entity",
                "fullTitle": "Entities with admin previledges create a new entity it should create a new entity",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.post(`/domains/${domain}/entities`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.send(entities)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "5cb86298-4382-4c12-bf7a-b58e445b4d64",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5cb86298-4382-4c12-bf7a-b58e445b4d64"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "4fb7253f-1523-4f9b-ad54-7076d59ae2d8",
            "title": "get all known entity types",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all known entity types",
                "fullTitle": "Entities with admin previledges get all known entity types it should GET all known entity types",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.get(`/domains/${domain}/entities/types`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.a('array');\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "41cc5fa8-9c5a-4ddf-bf80-4a172ceed4a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "41cc5fa8-9c5a-4ddf-bf80-4a172ceed4a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "c3605e5b-cc1e-4f81-815c-1b058600a3d4",
            "title": "get entities of one type",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET entities of one type",
                "fullTitle": "Entities with admin previledges get entities of one type it should GET entities of one type",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.get(`/domains/${domain}/entities/${entities.type}`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.a('array');\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "f2f81b0a-ee78-4037-81d5-c7779fd19f54",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f2f81b0a-ee78-4037-81d5-c7779fd19f54"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "82f0a86c-cf67-4bf9-a3c6-2c3cd880d5f9",
            "title": "get a single entity",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET a single entity",
                "fullTitle": "Entities with admin previledges get a single entity it should GET a single entity",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.get(`/domains/${domain}/entities/${entities.type}/${entities.id}`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.a('object');\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "176813a9-e544-4a5b-8372-192853f2d330",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "176813a9-e544-4a5b-8372-192853f2d330"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 13,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "96359de4-b7ae-401e-8396-3d5ab96cea58",
            "title": "add an entity attribute value",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should add an entity attribute value",
                "fullTitle": "Entities with admin previledges add an entity attribute value it should add an entity attribute value",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.post(`/domains/${domain}/entities/${entities.type}/${entities.id}/temprature`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.send({\n\t\t\"value\": \"25.6\",\n\t\t\"timestamp\": \"2016-06-08T18:20:27.873Z\"\n\t})\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "0a34e329-6cd8-438a-b341-4e1389a2c826",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0a34e329-6cd8-438a-b341-4e1389a2c826"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "f1f0066f-578a-43bf-9c37-589c5f3a23ef",
            "title": "get entity attribute values",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should get entity attribute values",
                "fullTitle": "Entities with admin previledges get entity attribute values it should get entity attribute values",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.get(`/domains/${domain}/entities/${entities.type}/${entities.id}/temprature`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "836bc7fe-eaf3-4331-8e55-070159af8e3f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "836bc7fe-eaf3-4331-8e55-070159af8e3f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 13,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "9cbada2a-5bf2-4607-9041-786690620ea8",
            "title": "set entity attribute values",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should set entity attribute values",
                "fullTitle": "Entities with admin previledges set entity attribute values it should set entity attribute values",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.put(`/domains/${domain}/entities/${entities.type}/${entities.id}/temprature`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.send({\n\t\t\"value\": \"26.6\",\n\t\t\"timestamp\": \"2016-06-08T18:20:27.873Z\"\n\t})\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "06212d17-46f3-4327-b59d-082fda7ac1ae",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "06212d17-46f3-4327-b59d-082fda7ac1ae"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "1027093e-7665-430c-a66f-d3f7594d3d7e",
            "title": "delete an entity attribute",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/entities.admin.test.js",
            "file": "/test/entities.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should delete an entity attribute",
                "fullTitle": "Entities with admin previledges delete an entity attribute it should delete an entity attribute",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.put(`/domains/${domain}/entities/${entities.type}/${entities.id}/temprature`)\n\t.set('Authorization', `Bearer ${token}`)\n\t.send({\n\t\t\"value\": \"26.6\",\n\t\t\"timestamp\": \"2016-06-08T18:20:27.873Z\"\n\t})\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                "err": {},
                "isRoot": false,
                "uuid": "4f769f12-45c5-4929-ab44-d0aba27d5f86",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4f769f12-45c5-4929-ab44-d0aba27d5f86"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "7197bd95-f9bb-4837-b975-3e47bd099061",
        "title": "Measurements with admin previledges",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
        "file": "/test/measurment.admin.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Measurements with admin previledges \"before all\" hook",
            "timedOut": false,
            "duration": 240,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n      .post(`/domains/${domain}/sensors`)\n      .set('authorization', `Bearer ${token}`)\n      .send(sensor)\n      .end((err, res) => {\n        done();\n      });\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "19bc8a86-8e7f-4adb-a6a8-2fe1400ff4c6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Measurements with admin previledges \"after all\" hook",
            "timedOut": false,
            "duration": 71,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .delete(`/domains/${domain}/sensors/${sensor.id}`)\n  .set('authorization', `Bearer ${token}`)\n  .send(sensor)\n  .end((err, res) => {\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "677c8774-80ff-478d-a529-75f429ac65de",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "cfea7cb4-49b5-4889-be35-8189019713bb",
            "title": "Get Measurements",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the measurements for a given sensor",
                "fullTitle": "Measurements with admin previledges Get Measurements it should GET all the measurements for a given sensor",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "475fc70f-a5b5-4bf2-bd50-13743329e67a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "475fc70f-a5b5-4bf2-bd50-13743329e67a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 29,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "10943118-3c8d-40f3-b8d4-754f09267789",
            "title": "POST Measurements",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should add a measurement value for a given sensor",
                "fullTitle": "Measurements with admin previledges POST Measurements it should add a measurement value for a given sensor",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors/${sensor.id}/measurements`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(measurement)\n  .end((err, res) => {\n    res.should.have.status(200);\n    //res.body.should.be.a('array');\n    //console.log(res);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "27af93cc-b945-4b70-9774-ece5de83ef90",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "27af93cc-b945-4b70-9774-ece5de83ef90"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 25,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "926fcdaa-edcf-43a3-94a4-236ed1ee91e9",
            "title": "Get a single Measurement",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the measurements for a given sensor",
                "fullTitle": "Measurements with admin previledges Get a single Measurement it should GET all the measurements for a given sensor",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    //res.body.should.be.a('array');\n    //console.log(res);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "cee3d4cf-2fb1-4100-b8ba-bb7c2d561c61",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cee3d4cf-2fb1-4100-b8ba-bb7c2d561c61"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 30,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "4a4e0463-364d-4a42-a4c1-4616a7e50685",
            "title": "Update Name of a Measurement",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the name of the measurement field",
                "fullTitle": "Measurements with admin previledges Update Name of a Measurement it should update the name of the measurement field",
                "timedOut": false,
                "duration": 126,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/name`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('content-type', 'text/plain')\n  .send(\"ss1\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}`)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('name').eql('ss1');\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6e9b08d8-a9a7-441d-8f23-56ffcc7aef21",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6e9b08d8-a9a7-441d-8f23-56ffcc7aef21"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 126,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "347b935a-e9e0-4c70-811d-61a0fe2701e0",
            "title": "Update Dimention of a Measurement",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the dimention of the measurement field",
                "fullTitle": "Measurements with admin previledges Update Dimention of a Measurement it should update the dimention of the measurement field",
                "timedOut": false,
                "duration": 132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/dimension`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('content-type', 'text/plain')\n  .send(\"degree\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}`)\n      .end((err, res) => {\n        //res.body.should.be.a('object');\n        //res.body.should.have.property('dimension').eql('degree');\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "0ce9a035-5942-4a1e-8401-80e8e635fd5f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0ce9a035-5942-4a1e-8401-80e8e635fd5f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 132,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "18fab67b-147d-4cdf-a3fb-77f36152054f",
            "title": "Update dimention",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the dimention of the measurement field",
                "fullTitle": "Measurements with admin previledges Update dimention it should update the dimention of the measurement field",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/dimension`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('content-type', 'text/plain')\n  .send(\"degree\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}`)\n      .end((err, res) => {\n        //res.body.should.be.a('object');\n        //res.body.should.have.property('dimension').eql('degree');\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c05e82fc-39ef-4c02-9beb-e30d48c1cfa0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c05e82fc-39ef-4c02-9beb-e30d48c1cfa0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 127,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "1537c258-09ef-4d1d-b435-da757165e2cd",
            "title": "Update unit",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the dimention of the measurement field",
                "fullTitle": "Measurements with admin previledges Update unit it should update the dimention of the measurement field",
                "timedOut": false,
                "duration": 128,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/unit`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('content-type', 'text/plain')\n  .send(\"degree\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}`)\n      .end((err, res) => {\n        //res.body.should.be.a('object');\n        //res.body.should.have.property('dimension').eql('degree');\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ed374da3-ccc3-4c59-b1c7-18a6d5e88072",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ed374da3-ccc3-4c59-b1c7-18a6d5e88072"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 128,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "3f0bbc2f-d83d-4fdc-9243-efb05a5ff7fb",
            "title": "get measurement values",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET get measurement values",
                "fullTitle": "Measurements with admin previledges get measurement values it should GET get measurement values",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/values`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    //res.body.should.be.a('array');\n    //console.log(res);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1416f8ee-af08-485e-91e8-507cda91bced",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1416f8ee-af08-485e-91e8-507cda91bced"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "ce6bed04-4b61-4394-817d-66e6fdffe432",
            "title": "get paginated measurement values",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.admin.test.js",
            "file": "/test/measurment.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET get measurement values",
                "fullTitle": "Measurements with admin previledges get paginated measurement values it should GET get measurement values",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/values?vLimit=10&vOffset=0&vDateFrom=2016-01-01T00:00:00.000Z&vDateTo=2016-01-31T23:59:59.999Z`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    res.body.should.have.lengthOf.below(11);\n    //console.log(res);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "41fa6e84-0544-4e11-b397-97c954aa01de",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "41fa6e84-0544-4e11-b397-97c954aa01de"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "e87b2228-cf10-4ac6-be86-c4a0e14811ff",
        "title": "Measurements",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
        "file": "/test/measurment.unauthorized.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Measurements \"before all\" hook",
            "timedOut": false,
            "duration": 239,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n      .post(`/domains/${domain}/sensors`)\n      .set('authorization', `Bearer ${token}`)\n      .send(sensor)\n      .end((err, res) => {\n        done();\n      });\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "82e4fb9d-0bd8-4b12-a652-191a362de580",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Measurements \"after all\" hook",
            "timedOut": false,
            "duration": 66,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .delete(`/domains/${domain}/sensors/${sensor.id}`)\n  .set('authorization', `Bearer ${token}`)\n  .send(sensor)\n  .end((err, res) => {\n    done();\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "f3c3470f-98a0-48a6-9454-c0504ec33327",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "951fbba0-f117-4e6b-bf81-e6e17d269139",
            "title": "Get Measurements",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the measurements for a given sensor",
                "fullTitle": "Measurements Get Measurements it should GET all the measurements for a given sensor",
                "timedOut": false,
                "duration": 113,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f40d78d7-c89c-4843-a0bc-6c57467b500c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f40d78d7-c89c-4843-a0bc-6c57467b500c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 113,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "ed609651-bdba-4ef0-8c67-27e333297903",
            "title": "POST Measurements",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should add a measurement value for a given sensor",
                "fullTitle": "Measurements POST Measurements it should add a measurement value for a given sensor",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors/${sensor.id}/measurements`)\n  .send(measurement)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3ff70650-dc61-45e2-bc40-9f42c58091ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3ff70650-dc61-45e2-bc40-9f42c58091ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 107,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "5a0c2582-12b4-491b-affb-9afbe9c3ce09",
            "title": "Get a single Measurement",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET a single the measurements for a given sensor",
                "fullTitle": "Measurements Get a single Measurement it should GET a single the measurements for a given sensor",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1c73bb11-a099-4b7a-ac83-8636951da4b1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1c73bb11-a099-4b7a-ac83-8636951da4b1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 107,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "bf48b131-6a3b-4042-93d0-27d94d439440",
            "title": "Update Name of a Measurement",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the name of the measurement field",
                "fullTitle": "Measurements Update Name of a Measurement it should update the name of the measurement field",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/name`)\n  .set('content-type', 'text/plain')\n  .send(\"ss1\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9aff624d-8c73-487c-8ed2-d3b793b52c29",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9aff624d-8c73-487c-8ed2-d3b793b52c29"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 99,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "b455ed9e-0bb1-4948-9c0d-fb24bb1c8f8c",
            "title": "Update Dimention of a Measurement",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the dimention of the measurement field",
                "fullTitle": "Measurements Update Dimention of a Measurement it should update the dimention of the measurement field",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/dimension`)\n  .set('content-type', 'text/plain')\n  .send(\"degree\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b67621fc-6e52-454f-a365-c5d741f23308",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b67621fc-6e52-454f-a365-c5d741f23308"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 101,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "7e52a7e1-8755-463a-996d-a7ae83c121b7",
            "title": "Update dimention",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the dimention of the measurement field",
                "fullTitle": "Measurements Update dimention it should update the dimention of the measurement field",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/dimension`)\n  .set('content-type', 'text/plain')\n  .send(\"degree\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "fb6b485d-aae6-474f-b49f-551005cebbb2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fb6b485d-aae6-474f-b49f-551005cebbb2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 93,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "f379d758-072d-43a8-927b-e7e124d7a968",
            "title": "Update unit",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/measurment.unauthorized.test.js",
            "file": "/test/measurment.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the dimention of the measurement field",
                "fullTitle": "Measurements Update unit it should update the dimention of the measurement field",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/measurements/${measurement.id}/unit`)\n  .set('content-type', 'text/plain')\n  .send(\"degree\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ee86bd68-8133-46ab-a72e-941e1a035887",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ee86bd68-8133-46ab-a72e-941e1a035887"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 98,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "b2217007-e0be-43b5-adcf-b63583093d40",
        "title": "Notifications",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/notifications.test.js",
        "file": "/test/notifications.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "eb8dda0b-0d38-4b59-84ab-666e57a3cb9d",
            "title": "post a message to social networks",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/notifications.test.js",
            "file": "/test/notifications.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should post a message to social networks",
                "fullTitle": "Notifications post a message to social networks it should post a message to social networks",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/notifications`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(notification)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6c974c52-4fab-4ebb-8e75-95810ba88aca",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6c974c52-4fab-4ebb-8e75-95810ba88aca"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "c1a9152d-9560-4de2-b787-d55956d18543",
            "title": "Get all notifications",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/notifications.test.js",
            "file": "/test/notifications.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the messages posted on social networks",
                "fullTitle": "Notifications Get all notifications it should GET all the messages posted on social networks",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/notifications`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "44036dac-6a06-42fe-bf6b-34c37d38dc22",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "44036dac-6a06-42fe-bf6b-34c37d38dc22"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "3c447910-f210-46b9-9ae2-4b4fc0a6ed96",
            "title": "Get a one message",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/notifications.test.js",
            "file": "/test/notifications.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should get a single notificaion",
                "fullTitle": "Notifications Get a one message it should get a single notificaion",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/notifications/${sampleNotification.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 500",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 500\n    at chai.request.get.set.end (test/notifications.test.js:68:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 500\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "6d13c9e2-23a4-41ae-96f4-dbd85b9ec8b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should return not found for notification that doesnt exist",
                "fullTitle": "Notifications Get a one message it should return not found for notification that doesnt exist",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/notifications/this-id-doesnt-exist${Date.now()}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(400);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 400 but got 500",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 400 but got 500\n    at chai.request.get.set.end (test/notifications.test.js:77:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 500\n+ 400\n"
                },
                "isRoot": false,
                "uuid": "2efb7881-5842-4715-b001-a6e69b1b28ab",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "6d13c9e2-23a4-41ae-96f4-dbd85b9ec8b8",
              "2efb7881-5842-4715-b001-a6e69b1b28ab"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "901f2295-4fbf-465c-aea8-87059dc0246f",
            "title": "delete a message to social networks",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/notifications.test.js",
            "file": "/test/notifications.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should delete a message to social networks",
                "fullTitle": "Notifications delete a message to social networks it should delete a message to social networks",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/${domain}/notifications/${sampleNotification.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "588fd1b4-e317-473d-9716-df96b5686d14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should return not found for message that doesnt exist",
                "fullTitle": "Notifications delete a message to social networks it should return not found for message that doesnt exist",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/${domain}/notifications/this-id-doesnt-exist${Date.now()}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(404);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f099b8b3-8a20-4dcb-b803-f5e6e3b6eac2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "588fd1b4-e317-473d-9716-df96b5686d14",
              "f099b8b3-8a20-4dcb-b803-f5e6e3b6eac2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 30,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "327566ae-d1b2-4dba-89bc-bedc32a2f3d1",
        "title": "Sensors with admin previledges",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
        "file": "/test/sensor.admin.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Sensors with admin previledges \"before all\" hook",
            "timedOut": false,
            "duration": 97,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n      .delete(`/domains/${domain}/sensors/${sensor.id}`)\n      .set('Authorization', `Bearer ${token}`)\n      .end((err, rss) => {\n        done();\n      })\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "785659aa-87d3-4781-8ac3-2b6d3c293b00",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6eda5fe0-a6ef-47aa-a50c-2fc53ccd7ca5",
            "title": "Get Sensors",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the the senseors",
                "fullTitle": "Sensors with admin previledges Get Sensors it should GET all the the senseors",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    //res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e62ec541-0649-4f5e-a642-c444a517c9a5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e62ec541-0649-4f5e-a642-c444a517c9a5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "4bf6a040-d5fa-4541-8238-7a6c18d8e15f",
            "title": "Create sensors",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should POST a sensor ",
                "fullTitle": "Sensors with admin previledges Create sensors it should POST a sensor ",
                "timedOut": false,
                "duration": 145,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors`)\n  .set('authorization', `Bearer ${token}`)\n  .send(sensor)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "34733f78-632f-414e-8d97-4558800c9fdf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should Reject posting data with repeated values",
                "fullTitle": "Sensors with admin previledges Create sensors it should Reject posting data with repeated values",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(sensor)\n  .end((err, res) => {\n    res.should.have.status(422);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "fc0c5445-a37f-4bc0-87b1-e8ff7c26596b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should Reject posting a sensor with invalid data",
                "fullTitle": "Sensors with admin previledges Create sensors it should Reject posting a sensor with invalid data",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(invalidSensor)\n  .end((err, res) => {\n    res.should.have.status(400);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "72774dca-32b5-4f66-bbbd-837bdad17953",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "34733f78-632f-414e-8d97-4558800c9fdf",
              "fc0c5445-a37f-4bc0-87b1-e8ff7c26596b",
              "72774dca-32b5-4f66-bbbd-837bdad17953"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 184,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "a70c80a7-1f98-45e3-986a-706e6ebc98a0",
            "title": "Get a Single Sensor",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET a sensor by the given id",
                "fullTitle": "Sensors with admin previledges Get a Single Sensor it should GET a sensor by the given id",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n        .get(`/domains/${domain}/sensors/${sensor.id}`)\n        .set('Authorization', `Bearer ${token}`)\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.be.a('object');\n          res.body.should.have.property('gateway_id');\n          res.body.should.have.property('name');\n          res.body.should.have.property('owner');\n          res.body.should.have.property('measurements');\n          res.body.should.have.property('location');\n          res.body.should.have.property('id').eql(sensor.id);\n          done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "67a8c86b-d0dc-4d3f-9673-97e4e8c316de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should give a 404 err a sensor with none existent id",
                "fullTitle": "Sensors with admin previledges Get a Single Sensor it should give a 404 err a sensor with none existent id",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n        .get(`/domains/${domain}/sensors/this-id-does-not-exist`)\n        .set('Authorization', `Bearer ${token}`)\n        .end((err, res) => {\n          res.should.have.status(404);\n          done();\n        });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403\n    at chai.request.get.set.end (test/sensor.admin.test.js:99:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 404\n"
                },
                "isRoot": false,
                "uuid": "36a119f0-fe0e-4bb0-a254-f7a4414511a0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "67a8c86b-d0dc-4d3f-9673-97e4e8c316de"
            ],
            "failures": [
              "36a119f0-fe0e-4bb0-a254-f7a4414511a0"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "ba7da340-599f-4271-9bb2-0629c65af544",
            "title": "Insert Owner",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the owner field",
                "fullTitle": "Sensors with admin previledges Insert Owner it should update the owner field",
                "timedOut": false,
                "duration": 132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/owner`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('content-type', 'text/plain')\n  .send(\"henok\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}`)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('owner').eql('henok');\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "608c9a88-8af9-401e-ab69-4f2dd162068f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "608c9a88-8af9-401e-ab69-4f2dd162068f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 132,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "a0dceb9d-31ca-4cb1-b83f-efd649661ccb",
            "title": "Insert Name",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the name field",
                "fullTitle": "Sensors with admin previledges Insert Name it should update the name field",
                "timedOut": false,
                "duration": 126,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/name`)\n  .set('Authorization', `Bearer ${token}`)\n  .set('content-type', 'text/plain')\n  .send(\"SEN1\")\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}`)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('name').eql('SEN1');\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "933a102f-4764-4b42-b621-3a5b8878be45",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "933a102f-4764-4b42-b621-3a5b8878be45"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 126,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "456cdeeb-6018-4646-a644-237c84b73a26",
            "title": "Insert Location",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the location field",
                "fullTitle": "Sensors with admin previledges Insert Location it should update the location field",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/location`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    \"latitude\": 5.36,\n    \"longitude\": 4.0083\n  })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.request(baseUrl)\n      .get(`/domains/${domain}/sensors/${sensor.id}`)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.location.should.have.property('latitude').eql(5.36);\n        res.body.location.should.have.property('longitude').eql(4.0083);\n        done();\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ffa05056-42f6-414e-a803-a644a2b39056",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ffa05056-42f6-414e-a803-a644a2b39056"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 129,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "2f09d1dd-6a9a-444b-96da-44f22fb6876d",
            "title": "Remove Sensor",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.admin.test.js",
            "file": "/test/sensor.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Remove a sensor by the given id",
                "fullTitle": "Sensors with admin previledges Remove Sensor it should Remove a sensor by the given id",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/${domain}/sensors/${sensor.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "77856359-09fe-4ca3-b77e-0aaa34cfaebc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "77856359-09fe-4ca3-b77e-0aaa34cfaebc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 59,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "7de71c71-1e1a-4d80-b5a5-12f0118ec5a6",
        "title": "Sensors",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
        "file": "/test/sensor.unauthorized.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9b14ca5a-499c-4917-9ae0-9d1b0563e49a",
            "title": "Get Sensors",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the the senseors",
                "fullTitle": "Sensors Get Sensors it should GET all the the senseors",
                "timedOut": false,
                "duration": 114,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/sensors`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    //res.body.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3f0b8290-c5a4-4e1d-87c5-3dfb1a7f14b1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3f0b8290-c5a4-4e1d-87c5-3dfb1a7f14b1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 114,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "a5a9a39f-53b4-4c31-8711-d38dd35faf6a",
            "title": "Create sensors",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should POST a sensor ",
                "fullTitle": "Sensors Create sensors it should POST a sensor ",
                "timedOut": false,
                "duration": 232,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors`)\n  .send(sensor)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "26595a1f-bc2a-4db8-976f-368871e3ae03",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should Reject posting data with reapeted values",
                "fullTitle": "Sensors Create sensors it should Reject posting data with reapeted values",
                "timedOut": false,
                "duration": 110,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors`)\n  .send(sensor)\n  .end((err, res) => {\n    res.should.have.status(422);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e3895f66-402c-4450-9679-897b736a7917",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should Reject posting a sensor with invalid data",
                "fullTitle": "Sensors Create sensors it should Reject posting a sensor with invalid data",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/sensors`)\n  .send(invalidSensor)\n  .end((err, res) => {\n    res.should.have.status(400);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ec3839fe-f578-40e0-9c35-495a743fd51b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "26595a1f-bc2a-4db8-976f-368871e3ae03",
              "e3895f66-402c-4450-9679-897b736a7917",
              "ec3839fe-f578-40e0-9c35-495a743fd51b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 441,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "3e449f03-0468-459c-b75f-13ae030a2c91",
            "title": "single sensor",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET a sensor by the given id",
                "fullTitle": "Sensors single sensor it should GET a sensor by the given id",
                "timedOut": false,
                "duration": 109,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n        .get(`/domains/${domain}/sensors/${sensor.id}`)\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.be.a('object');\n          res.body.should.have.property('gateway_id');\n          res.body.should.have.property('name');\n          res.body.should.have.property('owner');\n          res.body.should.have.property('measurements');\n          res.body.should.have.property('location');\n          res.body.should.have.property('id').eql(sensor.id);\n          done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "0194294e-ba0c-4c06-a78c-90a47d6778ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should give a 404 err a sensor with none existent id",
                "fullTitle": "Sensors single sensor it should give a 404 err a sensor with none existent id",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n        .get(`/domains/${domain}/sensors/this-id-does-not-exist`)\n        .end((err, res) => {\n          res.should.have.status(404);\n          done();\n        });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 404 but got 403\n    at chai.request.get.end (test/sensor.unauthorized.test.js:92:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 404\n"
                },
                "isRoot": false,
                "uuid": "41d30be1-5b1b-48d6-ab02-715325682906",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0194294e-ba0c-4c06-a78c-90a47d6778ad"
            ],
            "failures": [
              "41d30be1-5b1b-48d6-ab02-715325682906"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "c1b77174-fa11-46d2-9fb4-a546540ae388",
            "title": "insert owner",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the owner field",
                "fullTitle": "Sensors insert owner it should update the owner field",
                "timedOut": false,
                "duration": 114,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/owner`)\n  .set('content-type', 'text/plain')\n  .send(\"henok\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e6f0fd6c-ed08-4563-981c-cabe40698bfc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e6f0fd6c-ed08-4563-981c-cabe40698bfc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 114,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "f1364b4d-028b-464b-8ec9-663bff06f57a",
            "title": "insert name",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the name field",
                "fullTitle": "Sensors insert name it should update the name field",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/name`)\n  .set('content-type', 'text/plain')\n  .send(\"SEN1\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3381a331-0d72-4467-88e8-a7e7e434151a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3381a331-0d72-4467-88e8-a7e7e434151a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 95,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "710cad08-bb53-4f7d-9881-45ca488a74a2",
            "title": "insert location",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the location field",
                "fullTitle": "Sensors insert location it should update the location field",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/location`)\n  .send({\n    \"latitude\": 5.36,\n    \"longitude\": 4.0083\n  })\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "50b8eb8f-536b-4adc-92d3-bb498a9e46cf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "50b8eb8f-536b-4adc-92d3-bb498a9e46cf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 93,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "7e12923e-b1d5-4791-ac08-b938c69915a9",
            "title": "insert sensor kind",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update the sensor kind field",
                "fullTitle": "Sensors insert sensor kind it should update the sensor kind field",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/sensors/${sensor.id}/sensor_kind`)\n  .set('content-type', 'text/plain')\n  .send(\"Soil moisture sensor\")\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "34b11e5a-566d-433d-bea4-65d7d52dcb9d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "34b11e5a-566d-433d-bea4-65d7d52dcb9d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 91,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "50a1f16f-1436-440a-843b-4686e218084e",
            "title": "Remove sensor",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/sensor.unauthorized.test.js",
            "file": "/test/sensor.unauthorized.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Remove a sensor by the given id",
                "fullTitle": "Sensors Remove sensor it should Remove a sensor by the given id",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .delete(`/domains/${domain}/sensors/${sensor.id}`)\n  .end((err, res) => {\n    res.should.have.status(403);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "dda5f1c1-7b0a-46b1-b47f-773839f42ae1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dda5f1c1-7b0a-46b1-b47f-773839f42ae1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 96,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "35659cfc-c3c4-41ab-b41f-dbf74f6b2fb3",
        "title": "Socials ",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/socials.test.js",
        "file": "/test/socials.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4705c03d-ce75-43b9-b0b5-26f3a6bec8de",
            "title": "Get all messages sent",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/socials.test.js",
            "file": "/test/socials.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the messages sent",
                "fullTitle": "Socials  Get all messages sent it should GET all the messages sent",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.get(`/domains/${domain}/socials`)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.a('array');\n\t\tdone();\n\t});",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 503",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 503\n    at chai.request.get.end (test/socials.test.js:18:22)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:795:18)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 503\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "2cd37b59-ea84-4a79-9fe9-ddcd8d6ee1ad",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "2cd37b59-ea84-4a79-9fe9-ddcd8d6ee1ad"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "2e9f61aa-31e1-4b11-a893-8d4fa879a1c4",
            "title": "post a message to social networks",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/socials.test.js",
            "file": "/test/socials.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should post a message to social networds",
                "fullTitle": "Socials  post a message to social networks it should post a message to social networds",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n\t.post(`/domains/${domain}/socials`)\n\t.send(socialData)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 500",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 500\n    at chai.request.post.send.end (test/socials.test.js:30:22)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:795:18)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 500\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "c7957af0-0700-4f60-a531-2c0cb31ea906",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "c7957af0-0700-4f60-a531-2c0cb31ea906"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "14ce7b15-1b25-4a8e-bbb4-2dcd50ee25a0",
        "title": "Users with admin Previledges",
        "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
        "file": "/test/users.admin.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Users with admin Previledges \"before all\" hook",
            "timedOut": false,
            "duration": 101,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai.request(baseUrl)\n  .post('/auth/token')\n  .send(userCredentials)\n  .end(function (err, response) {\n    token = response.text;\n    chai.request(baseUrl)\n    .get(`/domains/${domain}/users/${userData.id}`)\n    .set('Authorization', `Bearer ${token}`)\n    .end((err, res) => {\n      done();\n    });\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "65ef57e0-898f-4a98-a3be-24d0a5dfbabf",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e0bd81d7-079f-44a6-a5b9-169c22b017f9",
            "title": "Get all users in a realm",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
            "file": "/test/users.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Get all users in a realm",
                "fullTitle": "Users with admin Previledges Get all users in a realm it should Get all users in a realm",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/users`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403\n    at chai.request.get.set.end (test/users.admin.test.js:37:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "45ab6d91-c7df-4a92-b883-9dc95f0223fb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "45ab6d91-c7df-4a92-b883-9dc95f0223fb"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "a9a22106-9c8e-4a28-8af0-72de12d38d9e",
            "title": "Create a new user in a realm",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
            "file": "/test/users.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Create a new user in a realm",
                "fullTitle": "Users with admin Previledges Create a new user in a realm it should Create a new user in a realm",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .post(`/domains/${domain}/users`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(userData)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403\n    at chai.request.post.set.send.end (test/users.admin.test.js:49:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "bd0fd139-f438-428c-901c-ec30872e4d2a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "bd0fd139-f438-428c-901c-ec30872e4d2a"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "403a1e66-85c6-439b-979a-ff4d555ec31d",
            "title": "Search users with specific criteria",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
            "file": "/test/users.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Search users with specific criteria",
                "fullTitle": "Users with admin Previledges Search users with specific criteria it should Search users with specific criteria",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/users/search/`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403\n    at chai.request.get.set.end (test/users.admin.test.js:60:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "1adbc120-a96b-4fb7-b50b-9c8a3782af20",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "1adbc120-a96b-4fb7-b50b-9c8a3782af20"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "19d87a16-db40-4000-8619-37709d0c3186",
            "title": "Get a Specific user",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
            "file": "/test/users.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Get a Specific user",
                "fullTitle": "Users with admin Previledges Get a Specific user it should Get a Specific user",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/users/${userData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403\n    at chai.request.get.set.end (test/users.admin.test.js:71:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "22aab429-3782-4c0d-b225-f758a3eda660",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "22aab429-3782-4c0d-b225-f758a3eda660"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "1c39eb9a-9f8e-469c-9f0a-51029e767a28",
            "title": "update user data",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
            "file": "/test/users.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should update user data",
                "fullTitle": "Users with admin Previledges update user data it should update user data",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .put(`/domains/${domain}/users/${userData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"id\": \"string\"\n  })\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403\n    at chai.request.put.set.send.end (test/users.admin.test.js:87:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "4bd090de-04e3-4939-bf58-203485b3fa46",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "4bd090de-04e3-4939-bf58-203485b3fa46"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          },
          {
            "uuid": "c1d572fb-4600-4c4f-a6ca-e5dc6806faa4",
            "title": "Remove a user",
            "fullFile": "/home/henok/Projects/nodesites/waz/Platform/tests/test/users.admin.test.js",
            "file": "/test/users.admin.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should Remove a user",
                "fullTitle": "Users with admin Previledges Remove a user it should Remove a user",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "chai.request(baseUrl)\n  .get(`/domains/${domain}/users/${userData.id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
                "err": {
                  "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 403\n    at chai.request.get.set.end (test/users.admin.test.js:98:27)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:631:3)\n    at node_modules/superagent/lib/node/index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:16:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "d57f4248-e23e-4660-b865-95abd8568de4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "d57f4248-e23e-4660-b865-95abd8568de4"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 20000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 20000
  },
  "copyrightYear": 2018
}