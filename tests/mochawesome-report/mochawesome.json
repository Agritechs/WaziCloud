{
  "stats": {
    "suites": 37,
    "tests": 73,
    "passes": 55,
    "pending": 5,
    "failures": 13,
    "start": "2019-02-19T09:15:50.076Z",
    "end": "2019-02-19T09:17:43.777Z",
    "duration": 113701,
    "testsRegistered": 73,
    "passPercent": 80.9,
    "pendingPercent": 6.8,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "5e570321-468e-45d9-bd63-7f2d275de621",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "45d9353d-b703-4378-9f96-4ed9d71d899c",
        "title": "Users",
        "fullFile": "/home/mehdi/git/forks/Platform/tests/test/users/users.test.js",
        "file": "/test/users/users.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Users \"before all\" hook",
            "timedOut": false,
            "duration": 971,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n  withAdmin = await utils.getAdminAuth()\n  withNormal = await utils.getNormalAuth()\n} catch (err) {\n  console.log('error:' + err)\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5cec4723-2937-47e2-9463-2e14300dec2b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Users \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n} catch (err) {\n  console.log('error:' + err)\n  throw err\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e741ce8a-c1c0-4c86-b185-dbdcb616772f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "0ba214da-8578-4856-a574-335397ba7f31",
            "title": "Get all users",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/users/users.test.js",
            "file": "/test/users/users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all users",
                "fullTitle": "Users Get all users should return all users",
                "timedOut": false,
                "duration": 429,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "let res = await getUsers().set(withAdmin)\nres.should.have.status(200);",
                "err": {
                  "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 403\n    at Proxy.<anonymous> (node_modules/chai-http/lib/http.js:92:10)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.it (test/users/users.test.js:44:23)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "45c8b4f8-2040-445d-9a30-3b34ff063ae0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "45c8b4f8-2040-445d-9a30-3b34ff063ae0"
            ],
            "pending": [],
            "skipped": [],
            "duration": 429,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "7d7403dd-2adc-4e29-9e55-e96278fffebb",
            "title": "Create user",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/users/users.test.js",
            "file": "/test/users/users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "Users Create user should create a new user",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "70c39e56-9560-458f-9dc2-6ea04925c88b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [],
            "pending": [
              "70c39e56-9560-458f-9dc2-6ea04925c88b"
            ],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "8bd04550-2782-49e6-862e-eab066267166",
            "title": "Search users",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/users/users.test.js",
            "file": "/test/users/users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should search users with specific criteria",
                "fullTitle": "Users Search users should search users with specific criteria",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "f705ec45-1221-4ff9-b4e8-a81ab4f0bbb7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [],
            "pending": [
              "f705ec45-1221-4ff9-b4e8-a81ab4f0bbb7"
            ],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "e9778850-b8ad-45da-b4cb-1b0b12adf1fc",
            "title": "Get user",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/users/users.test.js",
            "file": "/test/users/users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get a specific user",
                "fullTitle": "Users Get user should get a specific user",
                "timedOut": false,
                "duration": 331,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "let res2 = await getUsers(\"2ecfae24-f340-4ad0-a12e-02cdc60cd8ba\").set(withAdmin)\nres2.should.have.status(200);",
                "err": {
                  "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 403",
                  "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 403\n    at Proxy.<anonymous> (node_modules/chai-http/lib/http.js:92:10)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.it (test/users/users.test.js:62:24)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)",
                  "diff": "- 403\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "73dc46e4-2361-46f2-b8d4-9bb169bc9e49",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "73dc46e4-2361-46f2-b8d4-9bb169bc9e49"
            ],
            "pending": [],
            "skipped": [],
            "duration": 331,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "119698a2-4960-4ced-93ee-bb95d465b45a",
            "title": "update user",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/users/users.test.js",
            "file": "/test/users/users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update user data",
                "fullTitle": "Users update user should update user data",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "9b8d48b7-c995-44fd-baff-249b2cf3d2fa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [],
            "pending": [
              "9b8d48b7-c995-44fd-baff-249b2cf3d2fa"
            ],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "cb230fa6-6e67-46b9-a2a4-1b0de940256b",
            "title": "Remove user",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/users/users.test.js",
            "file": "/test/users/users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a user",
                "fullTitle": "Users Remove user should remove a user",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "1cce51a0-ae1b-4369-a0a3-8ee1b25c1e22",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [],
            "pending": [
              "1cce51a0-ae1b-4369-a0a3-8ee1b25c1e22"
            ],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 40000
      },
      {
        "uuid": "cb46e49d-830e-4e93-a478-654c26d93a66",
        "title": "Sensor-data",
        "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/sensor-data.test.js",
        "file": "/test/devices/sensor-data.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Sensor-data \"before all\" hook",
            "timedOut": false,
            "duration": 1407,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n  withAdmin = await utils.getAdminAuth()\n  withNormal = await utils.getNormalAuth()\n  await deleteDevice(device.id).set(withAdmin)\n} catch (err) {\n  console.log('error:' + err)\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e8fc9107-3b69-427e-8b91-18958484cb7d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Sensor-data \"after each\" hook",
            "timedOut": false,
            "duration": 602,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n  await deleteDevice(device.id).set(withAdmin)\n} catch (err) {\n  console.log('error:' + err)\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e99a4411-37da-4d10-b91c-ca68b1401455",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "8a04b236-92c2-4fb7-93a8-252f297c6b63",
            "title": "push sensor data",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/sensor-data.test.js",
            "file": "/test/devices/sensor-data.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "data is pushed",
                "fullTitle": "Sensor-data push sensor data data is pushed",
                "timedOut": false,
                "duration": 1507,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const resC = await createDevice(device).set(withAdmin);\nresC.should.have.status(204);\nlet res = await pushSensorValue(sensor.id, {\"value\": \"25.6\", \"timestamp\": \"2016-06-08T18:20:27.873Z\"}).set(withAdmin);\nres.should.have.status(204);\nlet res3 = await getSensorData(sensor.id).set(withAdmin)\nchai.expect(res3.body[0]).to.deep.include({\"value\": \"25.6\", \"timestamp\": \"2016-06-08T18:20:27.873Z\"});\n//res3.body[0].should.have.property('date_received');",
                "err": {},
                "isRoot": false,
                "uuid": "9bfa6f36-e140-4517-bf48-b86bf3d313da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "number data is pushed",
                "fullTitle": "Sensor-data push sensor data number data is pushed",
                "timedOut": false,
                "duration": 1677,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const resC = await createDevice(device).set(withAdmin);\nresC.should.have.status(204);\nlet res = await pushSensorValue(sensor.id, {\"value\": 25.6})\nres.should.have.status(204);\nlet res3 = await getSensorData(sensor.id).set(withAdmin)\nres3.body[0].should.deep.include({\"value\": 25.6});",
                "err": {},
                "isRoot": false,
                "uuid": "3ddda3cb-82bf-4d61-b333-c5f39c503a63",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "string data is pushed",
                "fullTitle": "Sensor-data push sensor data string data is pushed",
                "timedOut": false,
                "duration": 1547,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const resC = await createDevice(device).set(withAdmin);\nresC.should.have.status(204);\nlet res = await pushSensorValue(sensor.id, {\"value\": \"A\"})\nres.should.have.status(204);\nlet res3 = await getSensorData(sensor.id).set(withAdmin)\nres3.body[0].should.deep.include({\"value\": \"A\"});",
                "err": {},
                "isRoot": false,
                "uuid": "66eab484-9bc3-43d2-a81f-a3cc0c3380a2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "boolean data is pushed",
                "fullTitle": "Sensor-data push sensor data boolean data is pushed",
                "timedOut": false,
                "duration": 1743,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const resC = await createDevice(device).set(withAdmin);\nresC.should.have.status(204);\nlet res = await pushSensorValue(sensor.id, {\"value\": true})\nres.should.have.status(204);\nlet res3 = await getSensorData(sensor.id).set(withAdmin)\nres3.body[0].should.deep.include({\"value\": true});",
                "err": {},
                "isRoot": false,
                "uuid": "a7c5563d-6cd2-4bf5-ac3e-49bfb077c8a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "array data is pushed",
                "fullTitle": "Sensor-data push sensor data array data is pushed",
                "timedOut": false,
                "duration": 1637,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const resC = await createDevice(device).set(withAdmin);\nresC.should.have.status(204);\nlet res = await pushSensorValue(sensor.id, {\"value\": [true]})\nres.should.have.status(204);\nlet res3 = await getSensorData(sensor.id).set(withAdmin)\nres3.body[0].should.deep.include({\"value\": [true]});",
                "err": {},
                "isRoot": false,
                "uuid": "b10c2912-65d1-4874-837b-340f2bbcec41",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "object data is pushed",
                "fullTitle": "Sensor-data push sensor data object data is pushed",
                "timedOut": false,
                "duration": 1553,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const resC = await createDevice(device).set(withAdmin);\nresC.should.have.status(204);\nlet res = await pushSensorValue(sensor.id, {\"value\": {a:1, b:\"2\"}})\nres.should.have.status(204);\nlet res3 = await getSensorData(sensor.id).set(withAdmin)\nres3.body[0].should.deep.include({\"value\": {a:1, b:\"2\"}});",
                "err": {},
                "isRoot": false,
                "uuid": "5770cb65-6a7e-4fab-8541-f2c669ae0f31",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9bfa6f36-e140-4517-bf48-b86bf3d313da",
              "3ddda3cb-82bf-4d61-b333-c5f39c503a63",
              "66eab484-9bc3-43d2-a81f-a3cc0c3380a2",
              "a7c5563d-6cd2-4bf5-ac3e-49bfb077c8a6",
              "b10c2912-65d1-4874-837b-340f2bbcec41",
              "5770cb65-6a7e-4fab-8541-f2c669ae0f31"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9664,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 40000
      },
      {
        "uuid": "e3fad5a9-9209-431b-b497-260160da551d",
        "title": "Devices",
        "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/device.test.js",
        "file": "/test/devices/device.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Devices \"before all\" hook",
            "timedOut": false,
            "duration": 1266,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n  withAdmin = await utils.getAdminAuth()\n  withNormal = await utils.getNormalAuth()\n  await deleteDevice(device.id).set(withAdmin)\n} catch (err) {\n  console.log('error:' + err)\n}",
            "err": {},
            "isRoot": false,
            "uuid": "477dd297-08ef-45eb-a0e6-2ece91fafda8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Devices \"after each\" hook",
            "timedOut": false,
            "duration": 608,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n  await deleteDevice(device.id).set(withAdmin)\n} catch (err) {\n  console.log('error:' + err)\n  throw err\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e1866b42-9ab3-4585-b698-ec550c6e7fb3",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "8abcd3cc-4528-4985-9e24-b755c47b87b2",
            "title": "Get Permissions",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/device.test.js",
            "file": "/test/devices/device.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return permissions",
                "fullTitle": "Devices Get Permissions should return permissions",
                "timedOut": false,
                "duration": 361,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await getPermissions().set(withAdmin)",
                "err": {},
                "isRoot": false,
                "uuid": "d131286d-583f-418c-8759-b3239a1e23c1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "admin have permissions on device",
                "fullTitle": "Devices Get Permissions admin have permissions on device",
                "timedOut": false,
                "duration": 1082,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withNormal)\nlet res = await getPermissions().set(withAdmin)\nlet scopes = res.body.find(p => p.resource == device.id).scopes\nchai.expect(scopes).members(['devices:view', 'devices:update', 'devices:delete', 'devices-data:create', 'devices-data:view']);",
                "err": {},
                "isRoot": false,
                "uuid": "d8c4ae99-7e76-4ef5-90c4-2866bceb3432",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "admin have permissions on private device",
                "fullTitle": "Devices Get Permissions admin have permissions on private device",
                "timedOut": false,
                "duration": 981,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice({...device, visibility: 'private'}).set(withNormal)\nlet res = await getPermissions().set(withAdmin)\nlet scopes = res.body.find(p => p.resource == device.id).scopes\nchai.expect(scopes).members(['devices:view', 'devices:update', 'devices:delete', 'devices-data:create', 'devices-data:view']);",
                "err": {},
                "isRoot": false,
                "uuid": "b9c96d5d-5dd1-49b8-b53e-b5736598a0cd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user have permissions on own device",
                "fullTitle": "Devices Get Permissions normal user have permissions on own device",
                "timedOut": false,
                "duration": 832,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withNormal)\nlet res = await getPermissions().set(withNormal)\nlet scopes = res.body.find(p => p.resource == device.id).scopes\nchai.expect(scopes).members(['devices:view', 'devices:update', 'devices:delete', 'devices-data:create', 'devices-data:view']);",
                "err": {},
                "isRoot": false,
                "uuid": "a51e547d-896a-47dc-bfee-10e756678d54",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user can see public device and add data",
                "fullTitle": "Devices Get Permissions normal user can see public device and add data",
                "timedOut": false,
                "duration": 1018,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await getPermissions().set(withNormal)\nlet scopes = res.body.find(p => p.resource == device.id).scopes\nchai.expect(scopes).members(['devices:view', 'devices-data:view', 'devices-data:create']);",
                "err": {},
                "isRoot": false,
                "uuid": "e50a4922-c827-425b-901a-da27fd13ce90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user cannot see private device",
                "fullTitle": "Devices Get Permissions normal user cannot see private device",
                "timedOut": false,
                "duration": 1126,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice({...device, visibility: 'private'}).set(withAdmin)\nlet res = await getPermissions().set(withNormal)\nres.status.should.satisfy((s) => {\n  switch (s) {\n    case 200:\n      return ! res.body.map(s => s.id).includes(device.id);\n    case 403:\n      return true;\n    default:\n      return false;\n  }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c1f1117a-e612-4e2e-bac5-9fb6f766b2cc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d131286d-583f-418c-8759-b3239a1e23c1",
              "d8c4ae99-7e76-4ef5-90c4-2866bceb3432",
              "b9c96d5d-5dd1-49b8-b53e-b5736598a0cd",
              "a51e547d-896a-47dc-bfee-10e756678d54",
              "e50a4922-c827-425b-901a-da27fd13ce90",
              "c1f1117a-e612-4e2e-bac5-9fb6f766b2cc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5400,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "f0950279-07fd-46e0-9489-cc1dac52b9e5",
            "title": "Get Devices",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/device.test.js",
            "file": "/test/devices/device.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "admin can get devices",
                "fullTitle": "Devices Get Devices admin can get devices",
                "timedOut": false,
                "duration": 1579,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await getDevices().set(withAdmin)\nchai.expect(res.body.map(s => s.id)).to.include(device.id);",
                "err": {},
                "isRoot": false,
                "uuid": "960ad425-648b-4d8b-9baf-5b98a34664d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "admin can see private devices",
                "fullTitle": "Devices Get Devices admin can see private devices",
                "timedOut": false,
                "duration": 1317,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice({...device, visibility: 'private'}).set(withNormal)\nlet res = await getDevices().set(withAdmin)\nchai.expect(res.body.map(s => s.id)).to.include(device.id);",
                "err": {},
                "isRoot": false,
                "uuid": "00c34901-d21c-44e6-82f2-160f944dab78",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user can see public devices",
                "fullTitle": "Devices Get Devices normal user can see public devices",
                "timedOut": false,
                "duration": 1427,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await getDevices().set(withNormal)\nchai.expect(res.body.map(s => s.id)).to.include(device.id);",
                "err": {},
                "isRoot": false,
                "uuid": "7d3281b7-d056-47ef-ab0f-8f8484143872",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user can see own devices",
                "fullTitle": "Devices Get Devices normal user can see own devices",
                "timedOut": false,
                "duration": 1537,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice({...device, visibility: 'private'}).set(withNormal)\nlet res = await getDevices().set(withNormal)\nchai.expect(res.body.map(s => s.id)).to.include(device.id);",
                "err": {},
                "isRoot": false,
                "uuid": "6115cd0e-4347-4bc3-9c19-a5766a4e3ad5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user CANNOT see private devices",
                "fullTitle": "Devices Get Devices normal user CANNOT see private devices",
                "timedOut": false,
                "duration": 1536,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice({...device, visibility: 'private'}).set(withAdmin)\nlet res = await getDevices().set(withNormal)\nres.status.should.satisfy((s) => {\n  switch (s) {\n    case 200:\n      return ! res.body.map(s => s.id).includes(device.id);\n    case 403:\n      return true;\n    default:\n      return false;\n  }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1e4c95e9-6f60-4c12-924a-b5537d9ea6b4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "960ad425-648b-4d8b-9baf-5b98a34664d9",
              "00c34901-d21c-44e6-82f2-160f944dab78",
              "7d3281b7-d056-47ef-ab0f-8f8484143872",
              "6115cd0e-4347-4bc3-9c19-a5766a4e3ad5",
              "1e4c95e9-6f60-4c12-924a-b5537d9ea6b4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7396,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "34899db7-8412-4bc7-9316-5098a6bb79b3",
            "title": "Create device",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/device.test.js",
            "file": "/test/devices/device.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "device is created by admin",
                "fullTitle": "Devices Create device device is created by admin",
                "timedOut": false,
                "duration": 713,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"Before\")\nlet res = await createDevice(device).set(withAdmin)\nres.should.have.status(204);",
                "err": {},
                "isRoot": false,
                "uuid": "fb9f5982-1257-45bd-8735-3cc8f5a62287",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "device is created by normal user",
                "fullTitle": "Devices Create device device is created by normal user",
                "timedOut": false,
                "duration": 614,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let res = await createDevice(device).set(withNormal)\nres.should.have.status(204);",
                "err": {},
                "isRoot": false,
                "uuid": "c060bb2a-7634-4fbb-8129-325848b22a38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "device with the same id is rejected",
                "fullTitle": "Devices Create device device with the same id is rejected",
                "timedOut": false,
                "duration": 987,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await createDevice(device).set(withNormal)\nres.should.have.status(422);",
                "err": {},
                "isRoot": false,
                "uuid": "d7d1f4d6-c790-4645-bff4-fc0731e2141d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "device with invalid data is rejected",
                "fullTitle": "Devices Create device device with invalid data is rejected",
                "timedOut": false,
                "duration": 228,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let wrong = Object.assign({}, device)\ndelete(wrong.id)\nlet res = await createDevice(wrong).set(withAdmin)\nres.should.have.status(400);",
                "err": {},
                "isRoot": false,
                "uuid": "0c18c1d8-4a45-497e-bd7c-8e8c3783ce07",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fb9f5982-1257-45bd-8735-3cc8f5a62287",
              "c060bb2a-7634-4fbb-8129-325848b22a38",
              "d7d1f4d6-c790-4645-bff4-fc0731e2141d",
              "0c18c1d8-4a45-497e-bd7c-8e8c3783ce07"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2542,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "acbd88a3-16d8-4e17-9731-6bd9627f7d1f",
            "title": "Get a Single Device",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/device.test.js",
            "file": "/test/devices/device.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "retrieved device has all the correct values",
                "fullTitle": "Devices Get a Single Device retrieved device has all the correct values",
                "timedOut": false,
                "duration": 957,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await getDevice(device.id).set(withAdmin)\nres.should.have.status(200);\nres.body.should.be.a('object');\n//all fields of original device should be here\nres.body.should.deep.include(device);\n//read-only fields should be here\nres.body.should.have.property('date_created');\nres.body.should.have.property('date_modified');\nres.body.should.have.property('owner').eql(\"cdupont\");",
                "err": {
                  "message": "AssertionError: expected { Object (keycloak_id, gateway_id, ...) } to have deep property 'actuators' of [ Array(1) ], but got [ Array(1) ]",
                  "estack": "AssertionError: expected { Object (keycloak_id, gateway_id, ...) } to have deep property 'actuators' of [ Array(1) ], but got [ Array(1) ]\n    at Proxy.assertProperty (node_modules/chai/lib/chai/core/assertions.js:1873:12)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Proxy.<anonymous> (node_modules/chai/lib/chai/core/assertions.js:553:27)\n    at Array.forEach (<anonymous>)\n    at Proxy.include (node_modules/chai/lib/chai/core/assertions.js:547:15)\n    at Proxy.chainableMethodWrapper (node_modules/chai/lib/chai/utils/addChainableMethod.js:113:49)\n    at Context.it (test/devices/device.test.js:158:28)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)",
                  "diff": " [\n   {\n     \"actuator_kind\": \"Buzzer\"\n+     \"actuator_value_type\": \"ActString\"\n     \"id\": \"Act1\"\n     \"name\": \"My buzzer\"\n     \"value\": true\n   }\n"
                },
                "isRoot": false,
                "uuid": "ae7e31d0-eeb2-4b20-a83c-2d4ef1c47806",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "non existent id is rejected",
                "fullTitle": "Devices Get a Single Device non existent id is rejected",
                "timedOut": false,
                "duration": 284,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let res = await getDevice('this-id-does-not-exist').set(withAdmin)\nres.should.have.status(404);",
                "err": {},
                "isRoot": false,
                "uuid": "9204524d-44c5-422c-b454-f1f8e84ce0af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "admin can see private device",
                "fullTitle": "Devices Get a Single Device admin can see private device",
                "timedOut": false,
                "duration": 1029,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice({...device, visibility: 'private'}).set(withNormal)\nlet res = await getDevice(device.id).set(withAdmin)\nres.body.should.have.property('id').eql(device.id);",
                "err": {},
                "isRoot": false,
                "uuid": "b7982edb-8181-4f2b-a210-1ae0b5917bbf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user can see public device",
                "fullTitle": "Devices Get a Single Device normal user can see public device",
                "timedOut": false,
                "duration": 848,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await getDevice(device.id).set(withNormal)\nres.body.should.have.property('id').eql(device.id);",
                "err": {},
                "isRoot": false,
                "uuid": "668b9be3-6328-4e1b-8be8-c34d91c39411",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user can see own device",
                "fullTitle": "Devices Get a Single Device normal user can see own device",
                "timedOut": false,
                "duration": 804,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice({...device, visibility: 'private'}).set(withNormal)\nlet res = await getDevice(device.id).set(withNormal)\nres.body.should.have.property('id').eql(device.id);",
                "err": {},
                "isRoot": false,
                "uuid": "8b92e912-9366-42ef-b7f3-c031d6a8ec9e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user CANNOT see private device",
                "fullTitle": "Devices Get a Single Device normal user CANNOT see private device",
                "timedOut": false,
                "duration": 1023,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice({...device, visibility: 'private'}).set(withAdmin)\nlet res = await getDevice(device.id).set(withNormal)\nres.should.have.status(403);",
                "err": {},
                "isRoot": false,
                "uuid": "ff8787ec-8dd7-40c8-814a-b2de58af4b61",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9204524d-44c5-422c-b454-f1f8e84ce0af",
              "b7982edb-8181-4f2b-a210-1ae0b5917bbf",
              "668b9be3-6328-4e1b-8be8-c34d91c39411",
              "8b92e912-9366-42ef-b7f3-c031d6a8ec9e",
              "ff8787ec-8dd7-40c8-814a-b2de58af4b61"
            ],
            "failures": [
              "ae7e31d0-eeb2-4b20-a83c-2d4ef1c47806"
            ],
            "pending": [],
            "skipped": [],
            "duration": 4945,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "e447163e-a124-4f0e-bdb6-ff6494fa7674",
            "title": "Insert Name",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/device.test.js",
            "file": "/test/devices/device.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "name field should be updated",
                "fullTitle": "Devices Insert Name name field should be updated",
                "timedOut": false,
                "duration": 1206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await setDeviceAttr(device.id, \"name\", \"SEN1\").set(withAdmin)\nres.should.have.status(204);\nlet res2 = await getDevice(device.id).set(withAdmin);\nres2.body.should.have.property('name').eql('SEN1');",
                "err": {},
                "isRoot": false,
                "uuid": "16cd4d39-c850-4c4f-aeb5-9db995a6fe4c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user can update own device",
                "fullTitle": "Devices Insert Name normal user can update own device",
                "timedOut": false,
                "duration": 1216,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withNormal)\nlet res = await setDeviceAttr(device.id, \"name\", \"SEN1\").set(withNormal)\nlet res2 = await getDevice(device.id).set(withNormal);\nres2.body.should.have.property('name').eql('SEN1');",
                "err": {},
                "isRoot": false,
                "uuid": "a4ae329b-226a-4b59-9021-cc465244b8fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user CANNOT update device that he does not own",
                "fullTitle": "Devices Insert Name normal user CANNOT update device that he does not own",
                "timedOut": false,
                "duration": 1127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await setDeviceAttr(device.id, \"name\", \"SEN1\").set(withNormal)\nres.should.have.status(403);",
                "err": {},
                "isRoot": false,
                "uuid": "ea7d26a3-4f58-4f7f-8ae1-3377baf4993e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "16cd4d39-c850-4c4f-aeb5-9db995a6fe4c",
              "a4ae329b-226a-4b59-9021-cc465244b8fe",
              "ea7d26a3-4f58-4f7f-8ae1-3377baf4993e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3549,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "a4479ed8-cc9e-4c0a-8ddc-d5d67a935a0d",
            "title": "Insert Location",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/device.test.js",
            "file": "/test/devices/device.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Location field should be updated",
                "fullTitle": "Devices Insert Location Location field should be updated",
                "timedOut": false,
                "duration": 1760,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await setDeviceLocation(device.id, {latitude: 5.36, longitude: 4.0083}).set(withAdmin)\nres.should.have.status(204);\nlet res2 = await getDevice(device.id).set(withAdmin)\nres2.body.should.have.property('location').eql({\"latitude\": 5.36, \"longitude\": 4.0083});",
                "err": {},
                "isRoot": false,
                "uuid": "c7e18aee-540e-4671-b41a-1d538bbb3513",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c7e18aee-540e-4671-b41a-1d538bbb3513"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1760,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "2683e3e3-87d9-4c40-a2da-efef72d14f00",
            "title": "Insert Gateway",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/device.test.js",
            "file": "/test/devices/device.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "gateway field should be updated",
                "fullTitle": "Devices Insert Gateway gateway field should be updated",
                "timedOut": false,
                "duration": 1439,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await setDeviceAttr(device.id, \"gateway_id\", \"GW1\").set(withAdmin)\nres.should.have.status(204);\nlet res2 = await getDevice(device.id).set(withAdmin);\nres2.body.should.have.property('gateway_id').eql('GW1');",
                "err": {},
                "isRoot": false,
                "uuid": "d01072e3-68bf-4c6a-bd8d-8f0137927e5f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d01072e3-68bf-4c6a-bd8d-8f0137927e5f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1439,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "70143c80-b996-402c-b6b0-6d57e34576cf",
            "title": "Remove Device",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/device.test.js",
            "file": "/test/devices/device.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "admin can remove own device",
                "fullTitle": "Devices Remove Device admin can remove own device",
                "timedOut": false,
                "duration": 1413,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await deleteDevice(device.id).set(withAdmin)\nres.should.have.status(204);",
                "err": {},
                "isRoot": false,
                "uuid": "05f47039-b2ec-4579-9742-eb475e91f282",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "admin can remove other device",
                "fullTitle": "Devices Remove Device admin can remove other device",
                "timedOut": false,
                "duration": 1276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withNormal)\nlet res = await deleteDevice(device.id).set(withAdmin)\nres.should.have.status(204);",
                "err": {},
                "isRoot": false,
                "uuid": "d36f90c3-a8e9-4495-94e4-411c5b9516f1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user can remove own device",
                "fullTitle": "Devices Remove Device normal user can remove own device",
                "timedOut": false,
                "duration": 1217,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withNormal)\nlet res = await deleteDevice(device.id).set(withNormal)\nres.should.have.status(204);",
                "err": {},
                "isRoot": false,
                "uuid": "ef4c1ac9-4cdc-40b5-8a6b-514c21f66210",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user CANNOT remove device owned by other",
                "fullTitle": "Devices Remove Device normal user CANNOT remove device owned by other",
                "timedOut": false,
                "duration": 1174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await deleteDevice(device.id).set(withNormal)\nres.should.have.status(403);",
                "err": {},
                "isRoot": false,
                "uuid": "42fd15ab-47c8-4036-8522-90d51b38f9c7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "05f47039-b2ec-4579-9742-eb475e91f282",
              "d36f90c3-a8e9-4495-94e4-411c5b9516f1",
              "ef4c1ac9-4cdc-40b5-8a6b-514c21f66210",
              "42fd15ab-47c8-4036-8522-90d51b38f9c7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5080,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 40000
      },
      {
        "uuid": "5caecd70-0bb9-49b0-8608-b728804c3b44",
        "title": "Sensors",
        "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/sensor.test.js",
        "file": "/test/devices/sensor.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Sensors \"before all\" hook",
            "timedOut": false,
            "duration": 1329,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n  withAdmin = await utils.getAdminAuth()\n  withNormal = await utils.getNormalAuth()\n  await deleteDevice(device.id).set(withAdmin)\n} catch (err) {\n  console.log('error:' + err)\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5bdaf494-310d-4140-9c83-a2babf4191a9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Sensors \"after each\" hook",
            "timedOut": false,
            "duration": 454,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n  await deleteDevice(device.id).set(withAdmin)\n} catch (err) {\n  console.log('error:' + err)\n}",
            "err": {},
            "isRoot": false,
            "uuid": "dcc681b5-57b8-4e49-91c5-488cac430336",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "273488ff-a42d-42a8-b7a8-9347a107cac5",
            "title": "Get Sensors",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/sensor.test.js",
            "file": "/test/devices/sensor.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sensors are returned in an array",
                "fullTitle": "Sensors Get Sensors sensors are returned in an array",
                "timedOut": false,
                "duration": 1072,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await getSensors().set(withAdmin)\nres.should.have.status(200);\nchai.expect(res.body.map(m => m.id)).to.have.members(device.sensors.map(m => m.id));",
                "err": {},
                "isRoot": false,
                "uuid": "48b141e8-2b2f-4dfe-b4c2-f087d9dd9819",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user CANNOT see private sensors",
                "fullTitle": "Sensors Get Sensors normal user CANNOT see private sensors",
                "timedOut": false,
                "duration": 1022,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice({...device, visibility:'private'}).set(withAdmin)\nlet res = await getSensors().set(withNormal)\nres.should.have.status(403);",
                "err": {},
                "isRoot": false,
                "uuid": "4e5c9346-29b7-4a88-9a04-976040800351",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "48b141e8-2b2f-4dfe-b4c2-f087d9dd9819",
              "4e5c9346-29b7-4a88-9a04-976040800351"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2094,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "a4774fb8-1e35-412c-b0ce-1c48964685a2",
            "title": "Create sensor",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/sensor.test.js",
            "file": "/test/devices/sensor.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "admin can create a sensor",
                "fullTitle": "Sensors Create sensor admin can create a sensor",
                "timedOut": false,
                "duration": 1010,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await createSensor(sensor).set(withAdmin)\nres.should.have.status(204);",
                "err": {},
                "isRoot": false,
                "uuid": "8d32f476-a48e-4947-94e6-8512b99fb6db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user can create a sensor on his own device",
                "fullTitle": "Sensors Create sensor normal user can create a sensor on his own device",
                "timedOut": false,
                "duration": 910,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withNormal)\nlet res = await createSensor(sensor).set(withNormal)\nres.should.have.status(204);",
                "err": {},
                "isRoot": false,
                "uuid": "f5e5f64d-807f-4202-8137-c1b6506d8378",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user CANNOT create a sensor on a device owned by other",
                "fullTitle": "Sensors Create sensor normal user CANNOT create a sensor on a device owned by other",
                "timedOut": false,
                "duration": 1129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await createSensor(sensor).set(withNormal)\nres.should.have.status(403);",
                "err": {},
                "isRoot": false,
                "uuid": "2a3b55c0-38fb-4bf6-a4df-dd9b5fa6d46a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8d32f476-a48e-4947-94e6-8512b99fb6db",
              "f5e5f64d-807f-4202-8137-c1b6506d8378",
              "2a3b55c0-38fb-4bf6-a4df-dd9b5fa6d46a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3049,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "7101b5b6-8800-4a92-b5cd-84432c0202ca",
            "title": "Get a single Sensor",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/sensor.test.js",
            "file": "/test/devices/sensor.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "retrieved sensor values are correct",
                "fullTitle": "Sensors Get a single Sensor retrieved sensor values are correct",
                "timedOut": false,
                "duration": 1128,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await getSensor(sensor.id).set(withAdmin)\nres.should.have.status(200);\n//all fields of original device should be here\nres.body.should.deep.include(sensor);",
                "err": {},
                "isRoot": false,
                "uuid": "329cce19-a720-4c65-909c-5a6196396bfb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "329cce19-a720-4c65-909c-5a6196396bfb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1128,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "ace4982b-0470-4b78-a233-afac618774da",
            "title": "Update Name of a Sensor",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/sensor.test.js",
            "file": "/test/devices/sensor.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "name of sensor is updated",
                "fullTitle": "Sensors Update Name of a Sensor name of sensor is updated",
                "timedOut": false,
                "duration": 1534,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await putSensorAttr(sensor.id, \"name\", \"ss1\").set(withAdmin)\nres.should.have.status(204);\nlet res2 = await getSensor(sensor.id).set(withAdmin)\nres2.body.should.have.property('name').eql('ss1');",
                "err": {},
                "isRoot": false,
                "uuid": "9b29de17-5dcf-4dfa-aa7d-fcafb2a9249e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user CANNOT update attribute of device that he does not own",
                "fullTitle": "Sensors Update Name of a Sensor normal user CANNOT update attribute of device that he does not own",
                "timedOut": false,
                "duration": 1124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await putSensorAttr(sensor.id, \"name\", \"ss1\").set(withNormal)\nres.should.have.status(403);",
                "err": {},
                "isRoot": false,
                "uuid": "d9989b02-c7ca-45f4-85d7-1d8af1e26cdd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9b29de17-5dcf-4dfa-aa7d-fcafb2a9249e",
              "d9989b02-c7ca-45f4-85d7-1d8af1e26cdd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2658,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "f4b53f43-9014-4994-bf28-09f530eae264",
            "title": "Update quantity kind of a Sensor",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/sensor.test.js",
            "file": "/test/devices/sensor.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "quantity kind is updated",
                "fullTitle": "Sensors Update quantity kind of a Sensor quantity kind is updated",
                "timedOut": false,
                "duration": 1588,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await putSensorAttr(sensor.id, \"quantity_kind\", \"Temperature\").set(withAdmin)\nres.should.have.status(204);\nlet res2 = await getSensor(sensor.id).set(withAdmin)\nres2.body.should.have.property('quantity_kind').eql('Temperature');",
                "err": {},
                "isRoot": false,
                "uuid": "8c560b6c-bea0-4aa4-94e1-9368c2d439bd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8c560b6c-bea0-4aa4-94e1-9368c2d439bd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1588,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "0ecce267-5814-479b-a11e-ab9a82b8850b",
            "title": "Update sensing device",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/sensor.test.js",
            "file": "/test/devices/sensor.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sensing device is updated",
                "fullTitle": "Sensors Update sensing device sensing device is updated",
                "timedOut": false,
                "duration": 1537,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await putSensorAttr(sensor.id, \"sensor_kind\", \"Thermometer\").set(withAdmin)\nres.should.have.status(204);\nlet res2 = await getSensor(sensor.id).set(withAdmin)\nres2.body.should.have.property('sensor_kind').eql('Thermometer');",
                "err": {},
                "isRoot": false,
                "uuid": "950b49b1-1f25-4567-8d85-9259578f5ff5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "950b49b1-1f25-4567-8d85-9259578f5ff5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1537,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "49e2f026-4a74-4bf5-84cc-492a29cfa59a",
            "title": "Update unit",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/sensor.test.js",
            "file": "/test/devices/sensor.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "unit should be updated",
                "fullTitle": "Sensors Update unit unit should be updated",
                "timedOut": false,
                "duration": 1741,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await putSensorAttr(sensor.id, \"unit\", \"DegreeCelcius\").set(withAdmin)\nres.should.have.status(204);\nlet res2 = await getSensor(sensor.id).set(withAdmin)\nres2.body.should.have.property('unit').eql('DegreeCelcius');",
                "err": {},
                "isRoot": false,
                "uuid": "7040495c-06a6-460d-ad33-3e4d7ccc680f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7040495c-06a6-460d-ad33-3e4d7ccc680f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1741,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "b4a7be2e-1275-495e-8962-8874242c086a",
            "title": "push sensor value",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/devices/sensor.test.js",
            "file": "/test/devices/sensor.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "value is pushed",
                "fullTitle": "Sensors push sensor value value is pushed",
                "timedOut": false,
                "duration": 1849,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await pushSensorValue(sensor.id, {\"value\": \"25.6\", \"timestamp\": \"2016-06-08T18:20:27.873Z\"})\nres.should.have.status(204);\nlet res2 = await getSensor(sensor.id).set(withAdmin)\nres2.body.value.should.deep.include({\"value\": \"25.6\", \"timestamp\": \"2016-06-08T18:20:27Z\"});\nres2.body.value.should.have.property('date_received');",
                "err": {},
                "isRoot": false,
                "uuid": "5034b7b2-e349-40b0-9b17-532a98083963",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user can push on public device",
                "fullTitle": "Sensors push sensor value normal user can push on public device",
                "timedOut": false,
                "duration": 1432,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await pushSensorValue(sensor.id, {\"value\": \"25.6\", \"timestamp\": \"2016-06-08T18:20:27.873Z\"})\nres.should.have.status(204);",
                "err": {},
                "isRoot": false,
                "uuid": "a95c7d76-a6ea-4b7a-9974-ea729427c968",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "normal user CANNOT push on private device",
                "fullTitle": "Sensors push sensor value normal user CANNOT push on private device",
                "timedOut": false,
                "duration": 1245,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice({...device, visibility: 'private'}).set(withAdmin)\nlet res = await pushSensorValue(sensor.id, {\"value\": \"25.6\", \"timestamp\": \"2016-06-08T18:20:27Z\"}).set(withNormal)\nres.should.have.status(403);",
                "err": {},
                "isRoot": false,
                "uuid": "b90b99a2-c1f2-464b-a9de-cfc3a7947c65",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "number value is pushed",
                "fullTitle": "Sensors push sensor value number value is pushed",
                "timedOut": false,
                "duration": 2061,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await pushSensorValue(sensor.id, {\"value\": 25.6})\nres.should.have.status(204);\nlet res2 = await getSensor(sensor.id).set(withAdmin)\nres2.body.value.should.deep.include({\"value\": 25.6});",
                "err": {},
                "isRoot": false,
                "uuid": "36636050-e89f-426c-ac26-2d0554bdbb37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "string value is pushed",
                "fullTitle": "Sensors push sensor value string value is pushed",
                "timedOut": false,
                "duration": 2264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await pushSensorValue(sensor.id, {\"value\": \"A\"})\nres.should.have.status(204);\nlet res2 = await getSensor(sensor.id).set(withAdmin)\nres2.body.value.should.deep.include({\"value\": \"A\"});",
                "err": {},
                "isRoot": false,
                "uuid": "2b1bf4b8-f00a-45c8-91c4-041b33b46bc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "boolean value is pushed",
                "fullTitle": "Sensors push sensor value boolean value is pushed",
                "timedOut": false,
                "duration": 1747,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await pushSensorValue(sensor.id, {\"value\": true})\nres.should.have.status(204);\nlet res2 = await getSensor(sensor.id).set(withAdmin)\nres2.body.value.should.deep.include({\"value\": true});",
                "err": {},
                "isRoot": false,
                "uuid": "9f3d2d46-128b-46ae-9dea-03550c89657e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "array value is pushed",
                "fullTitle": "Sensors push sensor value array value is pushed",
                "timedOut": false,
                "duration": 1843,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await pushSensorValue(sensor.id, {\"value\": [true]})\nres.should.have.status(204);\nlet res2 = await getSensor(sensor.id).set(withAdmin)\nres2.body.value.should.deep.include({\"value\": [true]});",
                "err": {},
                "isRoot": false,
                "uuid": "3ffbf255-f670-43a6-9107-124582cb1fc4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "object value is pushed",
                "fullTitle": "Sensors push sensor value object value is pushed",
                "timedOut": false,
                "duration": 1646,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await createDevice(device).set(withAdmin)\nlet res = await pushSensorValue(sensor.id, {\"value\": {a:1, b:\"2\"}})\nres.should.have.status(204);\nlet res2 = await getSensor(sensor.id).set(withAdmin)\nres2.body.value.should.deep.include({\"value\": {a:1, b:\"2\"}});",
                "err": {},
                "isRoot": false,
                "uuid": "72f8d26d-e7d2-4099-8290-09751cd7d044",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5034b7b2-e349-40b0-9b17-532a98083963",
              "a95c7d76-a6ea-4b7a-9974-ea729427c968",
              "b90b99a2-c1f2-464b-a9de-cfc3a7947c65",
              "36636050-e89f-426c-ac26-2d0554bdbb37",
              "2b1bf4b8-f00a-45c8-91c4-041b33b46bc5",
              "9f3d2d46-128b-46ae-9dea-03550c89657e",
              "3ffbf255-f670-43a6-9107-124582cb1fc4",
              "72f8d26d-e7d2-4099-8290-09751cd7d044"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14087,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 40000
      },
      {
        "uuid": "1f25186d-be49-4776-a193-3f3946bf07b3",
        "title": "Socials",
        "fullFile": "/home/mehdi/git/forks/Platform/tests/test/notif/socials.test.js",
        "file": "/test/notif/socials.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Socials \"before all\" hook",
            "timedOut": false,
            "duration": 837,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n  withAdmin = await utils.getAdminAuth()\n  withNormal = await utils.getNormalAuth()\n} catch (err) {\n  console.log('error:' + err)\n}",
            "err": {},
            "isRoot": false,
            "uuid": "22e1e096-03e1-4799-8994-07aaede9b326",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8ee23a22-3d7b-498a-8580-f7a641b55462",
            "title": "Get all messages sent",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/notif/socials.test.js",
            "file": "/test/notif/socials.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the messages sent",
                "fullTitle": "Socials Get all messages sent it should GET all the messages sent",
                "timedOut": false,
                "duration": 204,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let res = await getSocialMsgs().set(withNormal)\nres.should.have.status(200);\nres.body.should.be.a('array');",
                "err": {},
                "isRoot": false,
                "uuid": "246e69f9-495a-4576-9e32-01006a5dc22c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "246e69f9-495a-4576-9e32-01006a5dc22c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 204,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "6bd83ad4-ecc9-4e39-9293-b8127d58091c",
            "title": "post a message to social networks",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/notif/socials.test.js",
            "file": "/test/notif/socials.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should post a message to twitter",
                "fullTitle": "Socials post a message to social networks it should post a message to twitter",
                "timedOut": false,
                "duration": 258,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "let res = await postSocialMsg(socialData).set(withNormal)\nres.should.have.status(200);",
                "err": {
                  "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                  "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Proxy.<anonymous> (node_modules/chai-http/lib/http.js:92:10)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.it (test/notif/socials.test.js:39:23)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)",
                  "diff": "- 400\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "a2bd37d9-e615-4b17-98a0-b6e80f5622dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail with bad username",
                "fullTitle": "Socials post a message to social networks it should fail with bad username",
                "timedOut": false,
                "duration": 241,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "let res = await postSocialMsg({...socialData, username: \"5sd54fd5zryetasgsds444444ddd\"}).set(withNormal)\nres.should.have.status(500);",
                "err": {
                  "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 500 but got 400",
                  "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 500 but got 400\n    at Proxy.<anonymous> (node_modules/chai-http/lib/http.js:92:10)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.it (test/notif/socials.test.js:43:23)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)",
                  "diff": "- 400\n+ 500\n"
                },
                "isRoot": false,
                "uuid": "c3f806bf-d8f2-414f-9125-4e690059e7bb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "a2bd37d9-e615-4b17-98a0-b6e80f5622dd",
              "c3f806bf-d8f2-414f-9125-4e690059e7bb"
            ],
            "pending": [],
            "skipped": [],
            "duration": 499,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "74d4d3d8-3534-41d6-8d14-fb6f39cf3f13",
            "title": "Get one message sent",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/notif/socials.test.js",
            "file": "/test/notif/socials.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET the messages sent",
                "fullTitle": "Socials Get one message sent it should GET the messages sent",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "f7615406-6689-4b94-821f-ab82cc2d3936",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [],
            "pending": [
              "f7615406-6689-4b94-821f-ab82cc2d3936"
            ],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 40000
      },
      {
        "uuid": "f342e78f-7693-46b4-8415-93e8d2c128aa",
        "title": "Notifications",
        "fullFile": "/home/mehdi/git/forks/Platform/tests/test/notif/notifications.test.js",
        "file": "/test/notif/notifications.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Notifications \"before all\" hook",
            "timedOut": false,
            "duration": 958,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n  withAdmin = await utils.getAdminAuth()\n  withNormal = await utils.getNormalAuth()\n  //let res = await createSensor(sensor).set(withAdmin)\n} catch (err) {\n  console.log('error:' + err)\n}",
            "err": {},
            "isRoot": false,
            "uuid": "576fc6d6-90fd-42ab-8283-60dc551bec0d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Notifications \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n  //await deleteSensor(sensor.id).set(withAdmin)\n} catch (err) {\n  console.log('error:' + err)\n}",
            "err": {},
            "isRoot": false,
            "uuid": "837311ad-ea90-43b9-b36a-c2c8fddf0fbe",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "4c33d71e-9484-430d-85f2-d9bd105cd731",
            "title": "Get notifications",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/notif/notifications.test.js",
            "file": "/test/notif/notifications.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should GET all the notifications",
                "fullTitle": "Notifications Get notifications it should GET all the notifications",
                "timedOut": false,
                "duration": 482,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "await createNotif(notif).set(withAdmin)\nlet res = await getNotifs()\nres.should.have.status(200);\nres.body.should.be.a('array');\nawait deleteNotif(res.text)",
                "err": {
                  "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 500",
                  "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 500\n    at Proxy.<anonymous> (node_modules/chai-http/lib/http.js:92:10)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.it (test/notif/notifications.test.js:51:23)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)",
                  "diff": "- 500\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "cd2296e4-33bb-471d-aacf-c8032371c2da",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "cd2296e4-33bb-471d-aacf-c8032371c2da"
            ],
            "pending": [],
            "skipped": [],
            "duration": 482,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "bf48e9f2-4684-4aaf-96b6-d82853de3209",
            "title": "Create notifications",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/notif/notifications.test.js",
            "file": "/test/notif/notifications.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "notification is created",
                "fullTitle": "Notifications Create notifications notification is created",
                "timedOut": false,
                "duration": 238,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "res = await createNotif(notif).set(withAdmin)\nres.should.have.status(200);\nres.text.should.be.a('string');\nawait deleteNotif(res.text)",
                "err": {
                  "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                  "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Proxy.<anonymous> (node_modules/chai-http/lib/http.js:92:10)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.it (test/notif/notifications.test.js:59:23)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)",
                  "diff": "- 400\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "39dd3e3c-01af-4c7d-a7ab-f5ae7fb1072b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "39dd3e3c-01af-4c7d-a7ab-f5ae7fb1072b"
            ],
            "pending": [],
            "skipped": [],
            "duration": 238,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "85197163-c89a-437a-8bda-02b4a4e5e664",
            "title": "Get one notification",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/notif/notifications.test.js",
            "file": "/test/notif/notifications.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "retrieved notification has all correct values",
                "fullTitle": "Notifications Get one notification retrieved notification has all correct values",
                "timedOut": false,
                "duration": 377,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "let res = await createNotif(notif).set(withAdmin)\nlet res2 = await getNotif(res.text)\nres2.should.have.status(200);\n//all fields of original notif should be here\nres2.body.should.deep.include(notif);\nres2.body.should.have.property('status').eql(\"active\");\nawait deleteNotif(res.text)",
                "err": {
                  "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 500",
                  "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 500\n    at Proxy.<anonymous> (node_modules/chai-http/lib/http.js:92:10)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.it (test/notif/notifications.test.js:68:24)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)",
                  "diff": "- 500\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "6c0391f5-180c-4bc3-9d5d-9abfe27f803e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should return not found for notification that doesnt exist",
                "fullTitle": "Notifications Get one notification it should return not found for notification that doesnt exist",
                "timedOut": false,
                "duration": 247,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "let res = await getNotif(123)\nres.should.have.status(400);",
                "err": {
                  "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 400 but got 500",
                  "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 400 but got 500\n    at Proxy.<anonymous> (node_modules/chai-http/lib/http.js:92:10)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.it (test/notif/notifications.test.js:76:23)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)",
                  "diff": "- 500\n+ 400\n"
                },
                "isRoot": false,
                "uuid": "991dc444-4444-4db8-b6ae-34eae51cf1a5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "6c0391f5-180c-4bc3-9d5d-9abfe27f803e",
              "991dc444-4444-4db8-b6ae-34eae51cf1a5"
            ],
            "pending": [],
            "skipped": [],
            "duration": 624,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "dec83a82-9c1e-4ea0-bd3b-2af3ac22cf2d",
            "title": "delete a notification",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/notif/notifications.test.js",
            "file": "/test/notif/notifications.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "it should delete a message to social networks",
                "fullTitle": "Notifications delete a notification it should delete a message to social networks",
                "timedOut": false,
                "duration": 462,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "res = await createNotif(notif)\nlet res2 = await deleteNotif(res.text)\nres2.should.have.status(200);\nawait deleteNotif(res.text)",
                "err": {
                  "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 500",
                  "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 500\n    at Proxy.<anonymous> (node_modules/chai-http/lib/http.js:92:10)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.it (test/notif/notifications.test.js:83:24)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)",
                  "diff": "- 500\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "e9313d4d-95d7-4836-beff-2ab209913d48",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should return not found for notif that doesnt exist",
                "fullTitle": "Notifications delete a notification it should return not found for notif that doesnt exist",
                "timedOut": false,
                "duration": 243,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "let res = await deleteNotif(123)\nres.should.have.status(404);",
                "err": {
                  "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 404 but got 500",
                  "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 404 but got 500\n    at Proxy.<anonymous> (node_modules/chai-http/lib/http.js:92:10)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.it (test/notif/notifications.test.js:88:23)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)",
                  "diff": "- 500\n+ 404\n"
                },
                "isRoot": false,
                "uuid": "da5961fb-69cf-4318-bbbc-45d49131b256",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "e9313d4d-95d7-4836-beff-2ab209913d48",
              "da5961fb-69cf-4318-bbbc-45d49131b256"
            ],
            "pending": [],
            "skipped": [],
            "duration": 705,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          },
          {
            "uuid": "5d33eb26-af16-4e5c-a95c-5196a8cf895f",
            "title": "Trigger notifications",
            "fullFile": "/home/mehdi/git/forks/Platform/tests/test/notif/notifications.test.js",
            "file": "/test/notif/notifications.test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Notifications Trigger notifications \"before all\" hook",
                "timedOut": false,
                "duration": 473,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await createSensor(sensor).set(withAdmin)\nawait pushMeasValue(\"TC1\", {\"value\": 10}).set(withAdmin)",
                "err": {},
                "isRoot": false,
                "uuid": "c5a24092-bae1-4561-9392-4a38aa04af23",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Notifications Trigger notifications \"after all\" hook",
                "timedOut": false,
                "duration": 202,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await deleteSensor(sensor.id).set(withAdmin)",
                "err": {},
                "isRoot": false,
                "uuid": "ad49f12c-f8a4-42a1-8659-6fc4d722be5f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Message should be sent upon notification creation",
                "fullTitle": "Notifications Trigger notifications Message should be sent upon notification creation",
                "timedOut": false,
                "duration": 750,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "utils.sleep(5000)\nlet res = await createNotif(notif).set(withAdmin)\nutils.sleep(1000)\nawait pushMeasValue(\"TC1\", {\"value\": 10}).set(withAdmin) \nutils.sleep(2000)\nawait pushMeasValue(\"TC1\", {\"value\": 11}).set(withAdmin) \nutils.sleep(1000)\nlet res2 = await getNotif(res.text)\n//fields showing that the notification has been sent\nres2.body.should.have.property('last_notification');\nres2.body.should.have.property('times_sent').eql(2);\nawait deleteNotif(res.text)",
                "err": {
                  "message": "AssertionError: expected {} to have property 'last_notification'",
                  "estack": "AssertionError: expected {} to have property 'last_notification'\n    at Proxy.assertProperty (node_modules/chai/lib/chai/core/assertions.js:1866:12)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.it (test/notif/notifications.test.js:110:29)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)"
                },
                "isRoot": false,
                "uuid": "0218f1db-de12-4981-afb2-c866f6dbe657",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "inactive notification should do nothing",
                "fullTitle": "Notifications Trigger notifications inactive notification should do nothing",
                "timedOut": false,
                "duration": 878,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "let res = await createNotif(notif).set(withAdmin)\nawait putNotifStatus(res.text, \"inactive\")\nawait pushMeasValue(\"TC1\", {\"value\": 10}).set(withAdmin) \nlet res2 = await getNotif(res.text)\n//all fields of original notif should be here\nres2.body.should.have.property('status').eql(\"inactive\");\nres2.body.should.have.property('times_sent').eql(1);\nawait deleteNotif(res.text)",
                "err": {
                  "message": "AssertionError: expected {} to have property 'status'",
                  "estack": "AssertionError: expected {} to have property 'status'\n    at Proxy.assertProperty (node_modules/chai/lib/chai/core/assertions.js:1866:12)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.it (test/notif/notifications.test.js:120:29)\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)"
                },
                "isRoot": false,
                "uuid": "33a34bd4-8392-40db-b40d-c3777a773a87",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "0218f1db-de12-4981-afb2-c866f6dbe657",
              "33a34bd4-8392-40db-b40d-c3777a773a87"
            ],
            "pending": [],
            "skipped": [],
            "duration": 1628,
            "root": false,
            "rootEmpty": false,
            "_timeout": 40000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 40000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 40000
  },
  "copyrightYear": 2019
}